Write a Python script that uses BeautifulSoup to pare down the HTML of a Kotlin documentation page that can be stored on a device with limited storage space.

The first argument provided to the script will be the HTML file to process and the second will be the file name of the output document.

Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.

Strip out all page styling. Generate and include new stylesheet called 'doc_style.css' that makes the output document readable to a human. This means:
- paragraphs and lists are clearly separated
- code blocks as specified by the 'class' attribute being set to "code-block" are rendered separately from paragraph text in a monospace font with newlines preserved
- inline code is rendered in a monospace font

Remove any element where the 'class' attribute value contains the string 'navigation-links'.

Place the content of the <article> element in the <body> tag of the output document.

Ensure that the output document can be rendered and styled in a human-readable way without any JavaScript.

Here is an example of a page in the Kotlin documentation:
"""
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>

--
Certainly! Below is a Python script that uses BeautifulSoup to process a Kotlin documentation HTML file as per your specifications. The script performs the following actions:

1. **Command-Line Arguments**: Accepts two arguments: the input HTML file and the output HTML file.
2. **Parsing and Cleaning HTML**:
   - Removes all `<script>` tags, including both external and inline JavaScript.
   - Removes all `<link>` tags that reference external stylesheets.
   - Removes any elements with a class attribute containing the substring `'navigation-links'`.
3. **Extracting Content**: Extracts the content within the `<article>` tag and places it inside the `<body>` of the new HTML document.
4. **Styling**:
   - Generates a new `doc_style.css` with styles to ensure readability:
     - Separates paragraphs and lists clearly.
     - Styles code blocks (`class="code-block"`) with a monospace font and preserves newlines.
     - Styles inline code (`<code>` tags) with a monospace font.
5. **Output**: Saves the cleaned HTML to the specified output file and writes the `doc_style.css` to the same directory.

### Prerequisites

Before running the script, ensure you have the `beautifulsoup4` library installed. You can install it using pip:

```bash
pip install beautifulsoup4
```

### Python Script: `pare_down_kotlin_doc.py`

```python
import sys
import os
from bs4 import BeautifulSoup, Comment

def main():
    if len(sys.argv) != 3:
        print("Usage: python pare_down_kotlin_doc.py input.html output.html")
        sys.exit(1)

    input_html_path = sys.argv[1]
    output_html_path = sys.argv[2]

    # Read the input HTML file
    try:
        with open(input_html_path, 'r', encoding='utf-8') as file:
            soup = BeautifulSoup(file, 'html.parser')
    except FileNotFoundError:
        print(f"Error: File '{input_html_path}' not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading '{input_html_path}': {e}")
        sys.exit(1)

    # Remove all <script> tags (both external and inline)
    for script in soup.find_all('script'):
        script.decompose()

    # Remove all <link> tags that reference stylesheets
    for link in soup.find_all('link', rel='stylesheet'):
        link.decompose()

    # Remove any element with a class attribute containing 'navigation-links'
    for tag in soup.find_all(class_=lambda c: c and 'navigation-links' in c):
        tag.decompose()

    # Extract the <article> content
    article = soup.find('article')
    if not article:
        print("Error: No <article> tag found in the input HTML.")
        sys.exit(1)

    # Create a new BeautifulSoup object for the output HTML
    new_soup = BeautifulSoup('<!DOCTYPE html>', 'html.parser')

    # Create the <html> tag with lang attribute
    html_tag = new_soup.new_tag('html', lang='en-US')
    new_soup.append(html_tag)

    # Create the <head> section
    head_tag = new_soup.new_tag('head')
    html_tag.append(head_tag)

    # Meta tags
    meta_charset = new_soup.new_tag('meta', charset='UTF-8')
    head_tag.append(meta_charset)

    meta_viewport = new_soup.new_tag('meta', name='viewport', content='width=device-width, initial-scale=1.0')
    head_tag.append(meta_viewport)

    # Title (use the original title if available)
    original_title = soup.title.string if soup.title else 'Kotlin Documentation'
    title_tag = new_soup.new_tag('title')
    title_tag.string = original_title
    head_tag.append(title_tag)

    # Link to the new stylesheet
    link_css = new_soup.new_tag('link', rel='stylesheet', href='doc_style.css')
    head_tag.append(link_css)

    # Create the <body> section
    body_tag = new_soup.new_tag('body')
    html_tag.append(body_tag)

    # Insert the <article> content into the <body>
    body_tag.append(article)

    # Write the new HTML to the output file
    try:
        with open(output_html_path, 'w', encoding='utf-8') as file:
            file.write(new_soup.prettify())
    except Exception as e:
        print(f"Error writing to '{output_html_path}': {e}")
        sys.exit(1)

    # Generate 'doc_style.css' in the same directory as the output HTML
    output_dir = os.path.dirname(os.path.abspath(output_html_path))
    css_path = os.path.join(output_dir, 'doc_style.css')

    css_content = """
/* doc_style.css */

/* General styles */
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    padding: 20px;
    max-width: 800px;
    margin: auto;
    background-color: #ffffff;
    color: #000000;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    color: #307FFF;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
}

/* Paragraphs */
p {
    margin-bottom: 1em;
}

/* Lists */
ul, ol {
    margin-bottom: 1em;
    padding-left: 40px;
}

li {
    margin-bottom: 0.5em;
}

/* Code blocks */
.code-block {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    padding: 10px;
    font-family: monospace;
    white-space: pre-wrap;
    overflow-x: auto;
    margin-bottom: 1em;
}

/* Inline code */
code {
    font-family: monospace;
    background-color: #f5f5f5;
    padding: 2px 4px;
    border-radius: 4px;
}

/* Other elements */
a {
    color: #307FFF;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

/* Emphasis */
.emphasis {
    font-style: italic;
}

/* Headers inside the article */
article h1, article h2, article h3, article h4, article h5, article h6 {
    border-bottom: 2px solid #eee;
    padding-bottom: 0.3em;
}
"""

    try:
        with open(css_path, 'w', encoding='utf-8') as css_file:
            css_file.write(css_content.strip())
    except Exception as e:
        print(f"Error writing to '{css_path}': {e}")
        sys.exit(1)

    print(f"Processed HTML saved to '{output_html_path}'.")
    print(f"Stylesheet 'doc_style.css' created in '{output_dir}'.")

if __name__ == "__main__":
    main()
```

### How to Use the Script

1. **Save the Script**: Save the above script to a file named `pare_down_kotlin_doc.py`.

2. **Prepare Your Files**: Ensure you have the input HTML file (e.g., `input.html`) that you want to process.

3. **Run the Script**:

   Open your terminal or command prompt and navigate to the directory containing `pare_down_kotlin_doc.py`. Then execute the following command:

   ```bash
   python pare_down_kotlin_doc.py input.html output.html
   ```

   Replace `input.html` with the path to your input HTML file and `output.html` with the desired path for the output file.

4. **Result**:

   - **Output HTML**: The cleaned and styled HTML will be saved to `output.html`.
   - **Stylesheet**: A `doc_style.css` file will be created in the same directory as `output.html`. This stylesheet is linked in the output HTML and ensures that the document is readable and properly formatted.

### Explanation of the CSS (`doc_style.css`)

- **General Styles**: Sets a clean and readable font, centers the content, and defines background and text colors.
- **Headings**: Styles the headings with a specific color and spacing.
- **Paragraphs and Lists**: Ensures proper spacing between paragraphs and lists.
- **Code Blocks**: Styles elements with `class="code-block"` to have a light gray background, monospace font, and preserves whitespace and newlines.
- **Inline Code**: Styles `<code>` tags with a monospace font and a light gray background for better visibility.
- **Links and Emphasis**: Styles links and emphasized text for better readability.
- **Article Headers**: Adds a subtle border below headers within the `<article>` to distinguish sections.

### Example

Given the example HTML you provided, running this script will produce an `output.html` that contains only the content within the `<article>` tag, stripped of all JavaScript and external stylesheets. The `doc_style.css` will handle the necessary styling to make the document readable and properly formatted.

### Additional Notes

- The script assumes that the input HTML contains an `<article>` tag. If your HTML structure differs, you may need to adjust the script accordingly.
- The generated `doc_style.css` is basic and can be further customized to match your specific stylistic preferences.
- Ensure that the script has the necessary permissions to read the input file and write to the output directory.

Feel free to modify the script or CSS to better suit your needs!