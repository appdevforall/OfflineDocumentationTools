Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

All command line arguments will be processed with Python's argparse library and will have human-readable flag names and usage messages.

If an exception or error in the Python code is encountered, write the full traceback information including line numbers to the log and then terminate the program.

In the input directory, individually process each file with a ".html" extension following these instructions placed between two "~~~" delimiter strings.

~~~
Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags
- All links to external content will be styled in red. All links to local files will be styled in blue.
- At the center of the top of each page, placed a link with the text "Menu" in large font that links to a separately-generated HTML menu for navigation these documentation pages. The name of the file to link to will be provided as a command line argument.
- Style all elements with a "class" attribute value containing "code-block" so they display as monospace-font code blocks that are separate from the text in which they appear. Preserve all newlines and whitespaces in the code so it appears in the same human-readable format as what is in the source document.
- Remove all elements with a "class" attribute value containing "naviation-links".
~~~

Produce a CSS stylesheet that styles the page in an attractive, mobile-friendly format that follows the principles of responsive design and implements the link coloration specified above. The name of this stylesheet will be provided as a command line argument. Include this stylesheet in every processed HTML page.

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

If a file contains no <article> element, write a message in the log file that includes the name of the file.

Here is an example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

Here is another example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2025-04-18T20:47:07.948298142"><title>Migrate to Kotlin code style | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"kotlin-coding-conventions-and-intellij-idea-formatter","level":0,"title":"Kotlin coding conventions and IntelliJ IDEA formatter","anchor":"#kotlin-coding-conventions-and-intellij-idea-formatter"},{"id":"differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style","level":0,"title":"Differences between \"Kotlin coding conventions\" and \"IntelliJ IDEA default code style\"","anchor":"#differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style"},{"id":"migration-to-a-new-code-style-discussion","level":0,"title":"Migration to a new code style discussion","anchor":"#migration-to-a-new-code-style-discussion"},{"id":"migration-to-a-new-code-style","level":0,"title":"Migration to a new code style","anchor":"#migration-to-a-new-code-style"},{"id":"in-gradle","level":1,"title":"In Gradle","anchor":"#in-gradle"},{"id":"in-maven","level":1,"title":"In Maven","anchor":"#in-maven"},{"id":"store-old-code-style-in-project","level":0,"title":"Store old code style in project","anchor":"#store-old-code-style-in-project"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="Migrate to Kotlin code style | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/code-style-migration-guide.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="Migrate to Kotlin code style | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/code-style-migration-guide.html#webpage",
    "url": "writerside-documentation/code-style-migration-guide.html",
    "name": "Migrate to Kotlin code style | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="code-style-migration-guide" data-main-title="Migrate to Kotlin code style" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Tools"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="code-style-migration-guide" id="code-style-migration-guide.md">Migrate to Kotlin code style</h1><section class="chapter"><h2 id="kotlin-coding-conventions-and-intellij-idea-formatter" data-toc="kotlin-coding-conventions-and-intellij-idea-formatter">Kotlin coding conventions and IntelliJ IDEA formatter</h2><p id="z46taud_7"><a href="coding-conventions.html" id="z46taud_12" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Kotlin coding conventions</a> affect several aspects of writing idiomatic Kotlin, and a set of formatting recommendations aimed at improving Kotlin code readability is among them.</p><p id="z46taud_8">Unfortunately, the code formatter built into IntelliJ IDEA had to work long before this document was released and now has a default setup that produces different formatting from what is now recommended.</p><p id="z46taud_9">It may seem a logical next step to remove this obscurity by switching the defaults in IntelliJ IDEA and make formatting consistent with the Kotlin coding conventions. But this would mean that all the existing Kotlin projects will have a new code style enabled the moment the Kotlin plugin is installed. Not really the expected result for plugin update, right?</p><p id="z46taud_10">That's why we have the following migration plan instead:</p><ul class="list _bullet" id="z46taud_11"><li class="list__item" id="z46taud_13"><p id="z46taud_17">Enable the official code style formatting by default starting from Kotlin 1.3 and only for new projects (old formatting can be enabled manually)</p></li><li class="list__item" id="z46taud_14"><p id="z46taud_18">Authors of existing projects may choose to migrate to the Kotlin coding conventions</p></li><li class="list__item" id="z46taud_15"><p id="z46taud_19">Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</p></li><li class="list__item" id="z46taud_16"><p id="z46taud_20">Switch to the default formatting and make it consistent with Kotlin coding conventions in Kotlin 1.4</p></li></ul></section><section class="chapter"><h2 id="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style" data-toc="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style">Differences between &quot;Kotlin coding conventions&quot; and &quot;IntelliJ IDEA default code style&quot;</h2><p id="z46taud_21">The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin coding conventions, it's recommended to use a single indent in cases where the long continuation indent has been forced before.</p><figure id="z46taud_22"><img alt="Code formatting" src="images/code-formatting-diff.png" title="Code formatting" width="700" height="192"></figure><p id="z46taud_23">In practice, quite a bit of code is affected, so this can be considered a major code style update.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style-discussion" data-toc="migration-to-a-new-code-style-discussion">Migration to a new code style discussion</h2><p id="z46taud_24">A new code style adoption might be a very natural process if it starts with a new project, when there's no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the <a href="coding-conventions.html" id="z46taud_30" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Coding conventions</a> document which is enabled by default.</p><p id="z46taud_25">Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</p><p id="z46taud_26">The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" id="z46taud_31" data-external="true" rel="noopener noreferrer" target="_blank">&quot;Annotate Previous Revision&quot;</a> can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</p><p id="z46taud_27">Also migrating can be harder for larger teams because committing a lot of files in several subsystems may produce merging conflicts in personal branches. And while each conflict resolution is usually trivial, it's still wise to know if there are large feature branches currently in work.</p><p id="z46taud_28">In general, for small projects, we recommend converting all the files at once.</p><p id="z46taud_29">For medium and large projects the decision may be tough. If you are not ready to update many files right away you may decide to migrate module by module, or continue with gradual migration for modified files only.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style" data-toc="migration-to-a-new-code-style">Migration to a new code style</h2><p id="z46taud_32">Switching to the Kotlin Coding Conventions code style can be done in <span class="control" id="z46taud_37">Settings/Preferences</span> | <span class="control" id="z46taud_38">Editor</span> | <span class="control" id="z46taud_39">Code Style</span> | <span class="control" id="z46taud_40">Kotlin</span> dialog. Switch scheme to <span class="control" id="z46taud_41">Project</span> and activate <span class="control" id="z46taud_42">Set from...</span> | <span class="control" id="z46taud_43">Kotlin style guide</span>.</p><p id="z46taud_33">In order to share those changes for all project developers <code class="code" id="z46taud_44">.idea/codeStyle</code> folder have to be committed to VCS.</p><p id="z46taud_34">If an external build system is used for configuring the project, and it's been decided not to share <code class="code" id="z46taud_45">.idea/codeStyle</code> folder, Kotlin coding conventions can be forced with an additional property:</p><section class="chapter"><h3 id="in-gradle" data-toc="in-gradle">In Gradle</h3><p id="z46taud_46">Add <code class="code" id="z46taud_47">kotlin.code.style=official</code> property to the <code class="code" id="z46taud_48">gradle.properties</code> file at the project root and commit the file to VCS.</p></section><section class="chapter"><h3 id="in-maven" data-toc="in-maven">In Maven</h3><p id="z46taud_49">Add <code class="code" id="z46taud_55">kotlin.code.style official</code> property to root <code class="code" id="z46taud_56">pom.xml</code> project file.</p><div class="code-block" data-lang="none">
&lt;properties&gt;
  &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt;
&lt;/properties&gt;
</div><aside class="prompt" data-type="warning" data-title="" id="z46taud_51"><p id="z46taud_57">Having the <span class="control" id="z46taud_58">kotlin.code.style</span> option set may modify the code style scheme during a project import and may change the code style settings.</p></aside><p id="z46taud_52">After updating your code style settings, activate <span class="control" id="z46taud_59">Reformat Code</span> in the project view on the desired scope.</p><figure id="z46taud_53"><img alt="Reformat code" src="images/reformat-code.png" title="Reformat code" width="500" height="380"></figure><p id="z46taud_54">For a gradual migration, it's possible to enable the <span class="control" id="z46taud_60">File is not formatted according to project settings</span> inspection. It will highlight the places that should be reformatted. After enabling the <span class="control" id="z46taud_61">Apply only to modified files</span> option, inspection will show formatting problems only in modified files. Such files are probably going to be committed soon anyway.</p></section></section><section class="chapter"><h2 id="store-old-code-style-in-project" data-toc="store-old-code-style-in-project">Store old code style in project</h2><p id="z46taud_62">It's always possible to explicitly set the IntelliJ IDEA code style as the correct code style for the project:</p><ol class="list _decimal" id="z46taud_63" type="1"><li class="list__item" id="z46taud_65"><p id="z46taud_67">In <span class="control" id="z46taud_68">Settings/Preferences</span> | <span class="control" id="z46taud_69">Editor</span> | <span class="control" id="z46taud_70">Code Style</span> | <span class="control" id="z46taud_71">Kotlin</span>, switch to the <span class="control" id="z46taud_72">Project</span> scheme.</p></li><li class="list__item" id="z46taud_66"><p id="z46taud_73">Open the <span class="control" id="z46taud_74">Load/Save</span> tab and in the <span class="control" id="z46taud_75">Use defaults from</span> select <span class="control" id="z46taud_76">Kotlin obsolete IntelliJ IDEA codestyle</span>.</p></li></ol><p id="z46taud_64">In order to share the changes across the project developers <code class="code" id="z46taud_77">.idea/codeStyle</code> folder, it has to be committed to VCS. Alternatively, <span class="control" id="z46taud_78">kotlin.code.style</span>=<span class="control" id="z46taud_79">obsolete</span> can be used for projects configured with Gradle or Maven.</p></section><div class="last-modified">19 April 2025</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="kotlin-ide.html" class="navigation-links__prev">IDEs for Kotlin development</a><a href="kotlin-notebook-overview.html" class="navigation-links__next">Kotlin Notebook</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

RESPONSE

Below is one complete Python script that meets the requirements. (Be sure to install BeautifulSoup – “pip install beautifulsoup4” – if you haven’t already.) You can save this as, for example, “process_docs.py” and run it from the command line.

-----------------------------------------
#!/usr/bin/env python3
"""
This script processes a set of Kotlin documentation HTML files (and an “images”
subdirectory) by stripping out JavaScript, styling and navigation elements, pulling out
the <article> content, and then writing a mobile‐friendly version using a common CSS
stylesheet. It logs every file processed (or errors) to a provided log file.
"""

import os
import sys
import shutil
import argparse
import logging
import traceback

from bs4 import BeautifulSoup

# -------- Functions for processing a single file --------
def process_html_file(input_filepath, output_filepath, menu_file, css_filename, logger):
    try:
        with open(input_filepath, "r", encoding="utf-8") as f_in:
            soup = BeautifulSoup(f_in, "html.parser")
    except Exception as ex:
        logger.error(f"Error reading {input_filepath}: {ex}")
        raise

    # Remove all <script> tags (removes both external and inline JavaScript)
    for script in soup.find_all("script"):
        script.decompose()

    # Remove page styling:
    # 1. Remove all <link> tags with rel="stylesheet"
    for link in soup.find_all("link", rel="stylesheet"):
        link.decompose()
    # 2. Remove any <style> tags (if present)
    for style in soup.find_all("style"):
        style.decompose()
    # 3. Optionally remove any inline style attributes from any tag.
    for tag in soup.find_all(True):
        if tag.has_attr("style"):
            del tag["style"]

    # Remove any element with a class attribute that contains "navigation-links"
    # or a common misspelling "naviation-links" (we check each class)
    def has_nav_class(tag):
        if tag.has_attr("class"):
            for cls in tag["class"]:
                if "navigation-links" in cls or "naviation-links" in cls:
                    return True
        return False

    for tag in soup.find_all(has_nav_class):
        tag.decompose()

    # Find the first <article> element
    article = soup.find("article")
    if not article:
        logger.info(f"File {os.path.basename(input_filepath)} does not contain an <article> element.")
        # In this case, we still produce an output file with an empty body.
        article_content = BeautifulSoup("", "html.parser")
    else:
        article_content = article

    # Process links inside the article content:
    # Set external links (href starts with http:// or https://) to red 
    # and local links to blue.
    for a in article_content.find_all("a", href=True):
        href = a['href'].strip()
        # A simple check: if href starts with http:// or https:// assume external, else local.
        if href.lower().startswith("http://") or href.lower().startswith("https://"):
            # Add inline style for red links. If there is an existing style, append.
            a['style'] = a.get("style", "") + "color:red !important;"
        else:
            a['style'] = a.get("style", "") + "color:blue !important;"

    # Process code blocks:
    # For any element whose class attribute contains "code-block", add inline styling
    # to use monospace font and preserve whitespaces.
    for tag in article_content.find_all(class_=lambda x: x and "code-block" in x):
        tag['style'] = tag.get("style", "") + "font-family: monospace; white-space: pre-wrap;"

    # Build a new soup for the output document
    new_soup = BeautifulSoup("", "html.parser")
    html_tag = new_soup.new_tag("html", lang="en")
    new_soup.append(html_tag)
    
    # Create head with basic metadata and a link to the CSS stylesheet.
    head_tag = new_soup.new_tag("head")
    meta_charset = new_soup.new_tag("meta", charset="UTF-8")
    head_tag.append(meta_charset)
    # Add a title (use the original title if available in the input soup)
    orig_title = soup.find("title")
    title_text = orig_title.get_text() if orig_title else "Documentation Page"
    title_tag = new_soup.new_tag("title")
    title_tag.string = title_text
    head_tag.append(title_tag)
    # Link to the provided CSS file
    link_css = new_soup.new_tag("link", rel="stylesheet", href=css_filename)
    head_tag.append(link_css)
    html_tag.append(head_tag)
    
    # Create new body and prepend the Menu link—the menu filename is provided by the user.
    body_tag = new_soup.new_tag("body")
    # Create a centered div for the Menu link
    menu_div = new_soup.new_tag("div", style="text-align:center; margin-bottom: 1em;")
    menu_link = new_soup.new_tag("a", href=menu_file, style="font-size:2em; font-weight:bold;")
    menu_link.string = "Menu"
    menu_div.append(menu_link)
    body_tag.append(menu_div)
    
    # Append the article content (if present)
    body_tag.append(article_content)
    
    html_tag.append(body_tag)
    
    # Write new HTML to output_filepath
    try:
        with open(output_filepath, "w", encoding="utf-8") as f_out:
            f_out.write(str(new_soup))
    except Exception as ex:
        logger.error(f"Error writing to {output_filepath}: {ex}")
        raise

    logger.info(f"Processed file {os.path.basename(input_filepath)} successfully.")

# -------- Main function --------
def main():
    parser = argparse.ArgumentParser(
        description="Process Kotlin documentation HTML files to create a pared down docs set with mobile-friendly styling."
    )
    parser.add_argument("-i", "--input-dir", required=True, help="Input directory containing HTML files and images subdirectory.")
    parser.add_argument("-o", "--output-dir", required=True, help="Output directory to place processed HTML files and images.")
    parser.add_argument("-l", "--log-file", required=True, help="Path to the log file.")
    parser.add_argument("-m", "--menu-file", required=True, help="Filename (or path relative to output directory) for the menu page to link to.")
    parser.add_argument("-c", "--css-file", required=True, help="Filename (or path relative to output directory) for the CSS stylesheet to link to.")

    args = parser.parse_args()

    # Setup logging – write messages and any exceptions to the provided log file.
    logging.basicConfig(
        filename=args.log_file,
        level=logging.INFO,
        format="%(asctime)s %(levelname)s: %(message)s"
    )
    logger = logging.getLogger(__name__)
    
    try:
        # Check if input directory exists
        if not os.path.isdir(args.input_dir):
            logger.error(f"Input directory {args.input_dir} does not exist.")
            sys.exit(1)

        # Create output directory if it does not exist.
        if not os.path.isdir(args.output_dir):
            os.makedirs(args.output_dir)
            logger.info(f"Created output directory {args.output_dir}.")

        # Process all .html files in the immediate input directory (not recursing subdirectories)
        for entry in os.listdir(args.input_dir):
            input_path = os.path.join(args.input_dir, entry)
            if os.path.isfile(input_path) and entry.lower().endswith(".html"):
                output_path = os.path.join(args.output_dir, entry)
                try:
                    process_html_file(input_path, output_path, args.menu_file, args.css_file, logger)
                except Exception as exc:
                    # In case any error not already caught, log traceback and raise.
                    logger.error(f"Exception processing {entry}:\n{traceback.format_exc()}")
                    sys.exit(1)

        # Copy the images subdirectory from the input directory to the output directory.
        images_src = os.path.join(args.input_dir, "images")
        images_dst = os.path.join(args.output_dir, "images")
        if os.path.isdir(images_src):
            # If destination exists remove it first to ensure a clean copy:
            if os.path.exists(images_dst):
                shutil.rmtree(images_dst)
            shutil.copytree(images_src, images_dst)
            logger.info("Copied images directory successfully.")
        else:
            logger.info("No images subdirectory found in input directory.")

        # Create the CSS stylesheet in the output directory
        css_output_path = os.path.join(args.output_dir, args.css_file)
        css_content = """
/* Mobile-friendly responsive design stylesheet */

/* Reset a few defaults */
body, h1, h2, h3, h4, h5, h6, p, ul, li, div {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Body styling */
body {
  font-family: Arial, sans-serif;
  line-height: 1.6;
  padding: 1em;
  background: #f8f8f8;
  color: #333;
}

/* Centered Menu link styling */
div[style*="text-align:center"] a {
  text-decoration: none;
}

/* Make links responsive with color cues */
a {
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}

/* External links in red, local links in blue.
   (Inline styles added in the processed HTML override these rules,
   but these rules act as a backup.) */
a.external {
  color: red;
}
a.local {
  color: blue;
}

/* Code blocks styled as monospace preserving whitespace */
.code-block {
  background-color: #eee;
  border: 1px solid #ccc;
  padding: 1em;
  margin: 1em 0;
  font-family: "Courier New", Courier, monospace;
  white-space: pre-wrap;
}

/* Responsive container */
article, .wrapper, main, body {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

/* Headings */
h1, h2, h3 {
  margin-bottom: 0.5em;
}
/* Paragraphs */
p {
  margin-bottom: 1em;
}
"""
        with open(css_output_path, "w", encoding="utf-8") as css_file:
            css_file.write(css_content)
        logger.info("CSS stylesheet created successfully.")

    except Exception as e:
        # Log full traceback including line numbers.
        logger.error(f"Unhandled exception:\n{traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()

-----------------------------------------

Explanation of key parts:

1. Command-Line Arguments:
   • The script uses argparse to define human‐readable flags: --input-dir (-i), --output-dir (-o), --log-file (-l), --menu-file (-m) and --css-file (-c).

2. Logging:
   • All processing events (success or error) are written to the designated log file with timestamps.
   • If any exception is raised, the full traceback (with line numbers) is logged before the script exits.

3. HTML Processing:
   • For every .html file in the input directory, the script parses the file with BeautifulSoup.
   • It removes all <script> tags, <link rel="stylesheet"> and <style> tags, and also strips out inline style attributes.
   • It then removes any element whose “class” attribute contains the substring “navigation-links” (or “naviation-links”).
   • It extracts the content of the <article> element. If no article exists, a log message is written.
   • All <a> tags have their style attribute updated based on whether the href is external (red) or local (blue).
   • Elements with “code-block” in the class attribute get inline monospace styling.
   • A new document is built using a basic <html><head><body> structure. A “Menu” link (using the provided menu filename) is added at the top center.
   • The CSS stylesheet link (using the provided CSS filename) is added in the head.

4. CSS Stylesheet:
   • A mobile‐friendly CSS file is generated in the output directory. It uses responsive design principles and implements
     the link coloration and code block styling as specified.

5. Images Directory:
   • Finally, the “images” subdirectory is copied from the input directory to the output directory.

Remember to adjust the CSS content to suit your aesthetic requirements if needed.