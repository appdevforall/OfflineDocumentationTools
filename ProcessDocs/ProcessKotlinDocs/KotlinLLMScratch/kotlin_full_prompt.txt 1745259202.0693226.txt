Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

If an exception or error in the Python code is encountered, write the full traceback information including line numbers to the log and then terminate the program.

In the input directory, individually process each file with a ".html" extension following these instructions which are delimited by a "~~~" string at the beginning and a "~~~" string at the end.

~~~

Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- In the <head> section of the output document, include a reference to a stylesheet file called 'doc_style.css' which will be generated separately at a later point in time.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags
- All links to external content will be styled in red. All links to local files will be styled in blue.
- At the center of the top of each page, placed a link with the text "Menu" in large font that links to a separately-generated HTML menu for navigation these documentation pages. The name of the file to link to will be provided as a command line argument.
~~~

Produce a CSS stylesheet that styles the page in an attractive, mobile-friendly format that follows the principles of responsive design and implements the link coloration specified above. The name of this stylesheet will be provided as a command line argument. Include this stylesheet in every processed HTML page.

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

If a file contains no <article> element, write a message in the log file that includes the name of the file.

Here is an example of a page in the Kotlin documentation:
"""
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>


RESPONSE

#!/usr/bin/env python3
"""
This script processes Kotlin documentation HTML files by “paring down” their content
for use on devices with limited storage. It removes JavaScript, styling, and unwanted
navigation elements, extracts the article content, adds a “Menu” link at the top,
and adjusts link styling. It also produces a responsive CSS stylesheet and copies the
images directory to the output location.

Usage:
    python3 script.py <input_dir> <output_dir> <log_file_path> <menu_filename> <stylesheet_filename>

Command line arguments:
  input_dir           Directory containing HTML files (directly in this folder) and an "images" subdirectory.
  output_dir          Directory where the processed HTML files and copied images directory will be placed.
  log_file_path       Full path to a log file where log messages will be written.
  menu_filename       Filename (or relative path) to which the “Menu” link should point.
  stylesheet_filename Filename of the CSS stylesheet (will be created in the output directory).
"""

import sys
import os
import shutil
import traceback
import logging
from bs4 import BeautifulSoup, NavigableString

def setup_logging(log_file_path):
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(log_file_path, mode="a", encoding="utf-8"),
            logging.StreamHandler(sys.stdout)
        ]
    )

def remove_scripts_and_styles(soup):
    # Remove all script tags (external references and inline JavaScript)
    for script in soup.find_all("script"):
        script.decompose()
    # Remove all style tags (internal styling)
    for style in soup.find_all("style"):
        style.decompose()
    # Also remove any link tags that refer to stylesheets (if any)
    for link in soup.find_all("link", rel=lambda x: x and "stylesheet" in x.lower()):
        link.decompose()

def remove_navigation_links(soup):
    # Remove elements whose class attribute contains "navigation-links"
    for tag in soup.find_all(True):
        classes = tag.get("class")
        if classes and any("navigation-links" in cls for cls in classes):
            tag.decompose()

def update_anchor_styles(tag):
    # Add a class to <a> tags depending on whether the link is external or local.
    # External is defined as starting with http:// or https://.
    if tag.name == "a" and tag.has_attr("href"):
        href = tag["href"]
        # Remove any previous inline style (to avoid conflicts)
        if href.startswith("http://") or href.startswith("https://"):
            # Mark external links with class "external"
            existing = tag.get("class", [])
            if "external" not in existing:
                existing.append("external")
            tag["class"] = existing
        else:
            # Mark local links with class "internal"
            existing = tag.get("class", [])
            if "internal" not in existing:
                existing.append("internal")
            tag["class"] = existing

def process_html_file(in_filepath, out_filepath, menu_filename, stylesheet_filename):
    with open(in_filepath, "r", encoding="utf-8") as infile:
        content = infile.read()

    soup = BeautifulSoup(content, "html.parser")
    # Remove all scripts and styling elements
    remove_scripts_and_styles(soup)
    # Remove navigation links (elements with a class attribute containing "navigation-links")
    remove_navigation_links(soup)

    # Attempt to locate the <article> element
    article = soup.find("article")
    if article is None:
        raise ValueError("No <article> element found.")

    # Before extracting the article, update all <a> tags inside it.
    for a in article.find_all("a", href=True):
        update_anchor_styles(a)

    # Create a new document with standard HTML structure.
    new_soup = BeautifulSoup("", "html.parser")

    # Create DOCTYPE and html element
    new_soup.append(BeautifulSoup("<!DOCTYPE html>", "html.parser"))
    html_tag = new_soup.new_tag("html")
    new_soup.append(html_tag)

    # Create head section, include a title (if available) and the stylesheet link.
    head_tag = new_soup.new_tag("head")
    # Attempt to preserve the title if it exists in the input document.
    orig_title = soup.find("title")
    if orig_title:
        title_tag = new_soup.new_tag("title")
        title_tag.string = orig_title.get_text()
        head_tag.append(title_tag)
    else:
        head_tag.append(new_soup.new_tag("title"))
        head_tag.title.string = os.path.basename(in_filepath)
    # Include a link to the stylesheet file (the name provided on the command line is used as href)
    link_tag = new_soup.new_tag("link", rel="stylesheet", type="text/css", href=stylesheet_filename)
    head_tag.append(link_tag)
    html_tag.append(head_tag)

    # Create body and add the "Menu" link at the top center
    body_tag = new_soup.new_tag("body")
    # Create the menu link container
    menu_div = new_soup.new_tag("div", attrs={"class": "menu-link"})
    menu_link = new_soup.new_tag("a", href=menu_filename)
    menu_link.string = "Menu"
    # Also, set an inline style to enlarge the text (for immediate effect)
    menu_link['style'] = "font-size:2em; text-decoration: none;"
    menu_div.append(menu_link)
    body_tag.append(menu_div)

    # Then include the article contents.
    # To preserve the tag hierarchy, we extract the entire <article> content.
    body_tag.append(article)

    html_tag.append(body_tag)

    # Write the new HTML document to the out_filepath.
    with open(out_filepath, "w", encoding="utf-8") as outfile:
        outfile.write(new_soup.prettify())

def create_stylesheet(out_dir, stylesheet_filename):
    # The CSS implements responsive mobile-friendly design, and link colors:
    # External links (class "external" or href starting with http/https) in red,
    # Internal/local links (class "internal") in blue.
    css_content = """
/* Base styling for the documentation */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 10px;
  line-height: 1.6;
  background-color: #fafafa;
  color: #333;
}

/* Ensure images are responsive */
img {
  max-width: 100%;
  height: auto;
}

/* Style external and internal links */
a.external {
  color: red;
  text-decoration: none;
}
a.internal {
  color: blue;
  text-decoration: none;
}

/* Menu link styling */
.menu-link {
  text-align: center;
  margin-bottom: 20px;
}

/* Responsive typography and spacing */
@media only screen and (max-width: 600px) {
  body {
    font-size: 16px;
    padding: 5px;
  }
}
"""
    stylesheet_path = os.path.join(out_dir, stylesheet_filename)
    with open(stylesheet_path, "w", encoding="utf-8") as css_file:
        css_file.write(css_content.strip())

def copy_images_directory(input_dir, output_dir):
    src_images = os.path.join(input_dir, "images")
    dst_images = os.path.join(output_dir, "images")
    if os.path.exists(src_images):
        # Remove the destination if it already exists to ensure a clean copy.
        if os.path.exists(dst_images):
            shutil.rmtree(dst_images)
        shutil.copytree(src_images, dst_images)
        logging.info("Copied images directory to output location.")
    else:
        logging.info("No images directory found in input directory.")

def main():
    if len(sys.argv) != 6:
        sys.exit("Usage: python3 script.py <input_dir> <output_dir> <log_file_path> <menu_filename> <stylesheet_filename>")
    input_dir = sys.argv[1]
    output_dir = sys.argv[2]
    log_file_path = sys.argv[3]
    menu_filename = sys.argv[4]
    stylesheet_filename = sys.argv[5]

    setup_logging(log_file_path)
    logging.info("Starting processing with input directory: %s, output directory: %s", input_dir, output_dir)

    try:
        # Ensure output directory exists.
        os.makedirs(output_dir, exist_ok=True)

        # Process each HTML file (only those with ".html" extension on the immediate level).
        for filename in os.listdir(input_dir):
            if filename.lower().endswith(".html"):
                in_filepath = os.path.join(input_dir, filename)
                out_filepath = os.path.join(output_dir, filename)
                logging.info("Processing file: %s", filename)
                try:
                    process_html_file(in_filepath, out_filepath, menu_filename, stylesheet_filename)
                    logging.info("Successfully processed file: %s", filename)
                except Exception as e:
                    # Log the error message but continue with other files.
                    logging.error("Error processing file %s: %s", filename, str(e))
                    logging.error(traceback.format_exc())
        # Create the responsive CSS stylesheet in the output directory.
        try:
            create_stylesheet(output_dir, stylesheet_filename)
            logging.info("Stylesheet '%s' created successfully in output directory.", stylesheet_filename)
        except Exception as e:
            logging.error("Error creating stylesheet '%s': %s", stylesheet_filename, str(e))
            logging.error(traceback.format_exc())
            raise

        # Copy the "images" subdirectory from input to output.
        try:
            copy_images_directory(input_dir, output_dir)
        except Exception as e:
            logging.error("Error copying images directory: %s", str(e))
            logging.error(traceback.format_exc())
            raise

        logging.info("Processing completed successfully.")

    except Exception as ex:
        # Log full traceback info including line numbers, then exit.
        logging.error("A fatal error occurred: %s", str(ex))
        logging.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()