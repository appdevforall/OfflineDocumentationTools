Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

All command line arguments will be processed with Python's argparse library and will have human-readable flag names and usage messages.

If an exception or error in the Python code is encountered, write the full traceback information including line numbers to the log and then terminate the program.

In the input directory, individually process each file with a ".html" extension following these instructions placed between two "~~~" delimiter strings.

~~~
Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- In the <head> section of the output document, include a reference to a stylesheet file called 'doc_style.css' which will be generated separately at a later point in time.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags
- All links to external content will be styled in red. All links to local files will be styled in blue.
- At the center of the top of each page, placed a link with the text "Menu" in large font that links to a separately-generated HTML menu for navigation these documentation pages. The name of the file to link to will be provided as a command line argument.
~~~

Produce a CSS stylesheet that styles the page in an attractive, mobile-friendly format that follows the principles of responsive design and implements the link coloration specified above. The name of this stylesheet will be provided as a command line argument. Include this stylesheet in every processed HTML page.

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

If a file contains no <article> element, write a message in the log file that includes the name of the file.

Here is an example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

Here is another example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2025-04-18T20:47:07.948298142"><title>Migrate to Kotlin code style | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"kotlin-coding-conventions-and-intellij-idea-formatter","level":0,"title":"Kotlin coding conventions and IntelliJ IDEA formatter","anchor":"#kotlin-coding-conventions-and-intellij-idea-formatter"},{"id":"differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style","level":0,"title":"Differences between \"Kotlin coding conventions\" and \"IntelliJ IDEA default code style\"","anchor":"#differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style"},{"id":"migration-to-a-new-code-style-discussion","level":0,"title":"Migration to a new code style discussion","anchor":"#migration-to-a-new-code-style-discussion"},{"id":"migration-to-a-new-code-style","level":0,"title":"Migration to a new code style","anchor":"#migration-to-a-new-code-style"},{"id":"in-gradle","level":1,"title":"In Gradle","anchor":"#in-gradle"},{"id":"in-maven","level":1,"title":"In Maven","anchor":"#in-maven"},{"id":"store-old-code-style-in-project","level":0,"title":"Store old code style in project","anchor":"#store-old-code-style-in-project"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="Migrate to Kotlin code style | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/code-style-migration-guide.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="Migrate to Kotlin code style | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/code-style-migration-guide.html#webpage",
    "url": "writerside-documentation/code-style-migration-guide.html",
    "name": "Migrate to Kotlin code style | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="code-style-migration-guide" data-main-title="Migrate to Kotlin code style" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Tools"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="code-style-migration-guide" id="code-style-migration-guide.md">Migrate to Kotlin code style</h1><section class="chapter"><h2 id="kotlin-coding-conventions-and-intellij-idea-formatter" data-toc="kotlin-coding-conventions-and-intellij-idea-formatter">Kotlin coding conventions and IntelliJ IDEA formatter</h2><p id="z46taud_7"><a href="coding-conventions.html" id="z46taud_12" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Kotlin coding conventions</a> affect several aspects of writing idiomatic Kotlin, and a set of formatting recommendations aimed at improving Kotlin code readability is among them.</p><p id="z46taud_8">Unfortunately, the code formatter built into IntelliJ IDEA had to work long before this document was released and now has a default setup that produces different formatting from what is now recommended.</p><p id="z46taud_9">It may seem a logical next step to remove this obscurity by switching the defaults in IntelliJ IDEA and make formatting consistent with the Kotlin coding conventions. But this would mean that all the existing Kotlin projects will have a new code style enabled the moment the Kotlin plugin is installed. Not really the expected result for plugin update, right?</p><p id="z46taud_10">That's why we have the following migration plan instead:</p><ul class="list _bullet" id="z46taud_11"><li class="list__item" id="z46taud_13"><p id="z46taud_17">Enable the official code style formatting by default starting from Kotlin 1.3 and only for new projects (old formatting can be enabled manually)</p></li><li class="list__item" id="z46taud_14"><p id="z46taud_18">Authors of existing projects may choose to migrate to the Kotlin coding conventions</p></li><li class="list__item" id="z46taud_15"><p id="z46taud_19">Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</p></li><li class="list__item" id="z46taud_16"><p id="z46taud_20">Switch to the default formatting and make it consistent with Kotlin coding conventions in Kotlin 1.4</p></li></ul></section><section class="chapter"><h2 id="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style" data-toc="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style">Differences between &quot;Kotlin coding conventions&quot; and &quot;IntelliJ IDEA default code style&quot;</h2><p id="z46taud_21">The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin coding conventions, it's recommended to use a single indent in cases where the long continuation indent has been forced before.</p><figure id="z46taud_22"><img alt="Code formatting" src="images/code-formatting-diff.png" title="Code formatting" width="700" height="192"></figure><p id="z46taud_23">In practice, quite a bit of code is affected, so this can be considered a major code style update.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style-discussion" data-toc="migration-to-a-new-code-style-discussion">Migration to a new code style discussion</h2><p id="z46taud_24">A new code style adoption might be a very natural process if it starts with a new project, when there's no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the <a href="coding-conventions.html" id="z46taud_30" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Coding conventions</a> document which is enabled by default.</p><p id="z46taud_25">Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</p><p id="z46taud_26">The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" id="z46taud_31" data-external="true" rel="noopener noreferrer" target="_blank">&quot;Annotate Previous Revision&quot;</a> can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</p><p id="z46taud_27">Also migrating can be harder for larger teams because committing a lot of files in several subsystems may produce merging conflicts in personal branches. And while each conflict resolution is usually trivial, it's still wise to know if there are large feature branches currently in work.</p><p id="z46taud_28">In general, for small projects, we recommend converting all the files at once.</p><p id="z46taud_29">For medium and large projects the decision may be tough. If you are not ready to update many files right away you may decide to migrate module by module, or continue with gradual migration for modified files only.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style" data-toc="migration-to-a-new-code-style">Migration to a new code style</h2><p id="z46taud_32">Switching to the Kotlin Coding Conventions code style can be done in <span class="control" id="z46taud_37">Settings/Preferences</span> | <span class="control" id="z46taud_38">Editor</span> | <span class="control" id="z46taud_39">Code Style</span> | <span class="control" id="z46taud_40">Kotlin</span> dialog. Switch scheme to <span class="control" id="z46taud_41">Project</span> and activate <span class="control" id="z46taud_42">Set from...</span> | <span class="control" id="z46taud_43">Kotlin style guide</span>.</p><p id="z46taud_33">In order to share those changes for all project developers <code class="code" id="z46taud_44">.idea/codeStyle</code> folder have to be committed to VCS.</p><p id="z46taud_34">If an external build system is used for configuring the project, and it's been decided not to share <code class="code" id="z46taud_45">.idea/codeStyle</code> folder, Kotlin coding conventions can be forced with an additional property:</p><section class="chapter"><h3 id="in-gradle" data-toc="in-gradle">In Gradle</h3><p id="z46taud_46">Add <code class="code" id="z46taud_47">kotlin.code.style=official</code> property to the <code class="code" id="z46taud_48">gradle.properties</code> file at the project root and commit the file to VCS.</p></section><section class="chapter"><h3 id="in-maven" data-toc="in-maven">In Maven</h3><p id="z46taud_49">Add <code class="code" id="z46taud_55">kotlin.code.style official</code> property to root <code class="code" id="z46taud_56">pom.xml</code> project file.</p><div class="code-block" data-lang="none">
&lt;properties&gt;
  &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt;
&lt;/properties&gt;
</div><aside class="prompt" data-type="warning" data-title="" id="z46taud_51"><p id="z46taud_57">Having the <span class="control" id="z46taud_58">kotlin.code.style</span> option set may modify the code style scheme during a project import and may change the code style settings.</p></aside><p id="z46taud_52">After updating your code style settings, activate <span class="control" id="z46taud_59">Reformat Code</span> in the project view on the desired scope.</p><figure id="z46taud_53"><img alt="Reformat code" src="images/reformat-code.png" title="Reformat code" width="500" height="380"></figure><p id="z46taud_54">For a gradual migration, it's possible to enable the <span class="control" id="z46taud_60">File is not formatted according to project settings</span> inspection. It will highlight the places that should be reformatted. After enabling the <span class="control" id="z46taud_61">Apply only to modified files</span> option, inspection will show formatting problems only in modified files. Such files are probably going to be committed soon anyway.</p></section></section><section class="chapter"><h2 id="store-old-code-style-in-project" data-toc="store-old-code-style-in-project">Store old code style in project</h2><p id="z46taud_62">It's always possible to explicitly set the IntelliJ IDEA code style as the correct code style for the project:</p><ol class="list _decimal" id="z46taud_63" type="1"><li class="list__item" id="z46taud_65"><p id="z46taud_67">In <span class="control" id="z46taud_68">Settings/Preferences</span> | <span class="control" id="z46taud_69">Editor</span> | <span class="control" id="z46taud_70">Code Style</span> | <span class="control" id="z46taud_71">Kotlin</span>, switch to the <span class="control" id="z46taud_72">Project</span> scheme.</p></li><li class="list__item" id="z46taud_66"><p id="z46taud_73">Open the <span class="control" id="z46taud_74">Load/Save</span> tab and in the <span class="control" id="z46taud_75">Use defaults from</span> select <span class="control" id="z46taud_76">Kotlin obsolete IntelliJ IDEA codestyle</span>.</p></li></ol><p id="z46taud_64">In order to share the changes across the project developers <code class="code" id="z46taud_77">.idea/codeStyle</code> folder, it has to be committed to VCS. Alternatively, <span class="control" id="z46taud_78">kotlin.code.style</span>=<span class="control" id="z46taud_79">obsolete</span> can be used for projects configured with Gradle or Maven.</p></section><div class="last-modified">19 April 2025</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="kotlin-ide.html" class="navigation-links__prev">IDEs for Kotlin development</a><a href="kotlin-notebook-overview.html" class="navigation-links__next">Kotlin Notebook</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

RESPONSE

Below is one complete Python script that meets the requirements. (Save it as, for example, process_docs.py.) You can run it with the proper arguments. In addition, the script generates a CSS stylesheet file (with the supplied name) that uses mobile‐friendly, responsive design and colors external links red and local links blue. 

Below is the full code:

------------------------------------------------------------
#!/usr/bin/env python3
"""
This script processes a directory of Kotlin HTML documentation files and pares them down to remove
JavaScript, styling, and navigation links for low–storage usage. For each HTML file found in the
input directory (only in its top level), it extracts the content of the <article> element,
prepends a centered “Menu” link (whose URL is provided as an argument), and rewrites all hyperlinks
so that external links appear in red and local links appear in blue.  
The output HTML files are written into the output directory (with the same filenames). The script
copies the "images" subdirectory from the input directory into the output directory.  
All actions are logged to a log file (whose path is supplied as an argument).  
If any error occurs, the full traceback is written to the log file and the program terminates.
"""

import os
import sys
import argparse
import logging
import shutil
import traceback
from bs4 import BeautifulSoup

def setup_logging(log_path):
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s: %(message)s',
        filename=log_path,
        filemode='a'
    )

def create_responsive_stylesheet(stylesheet_path):
    # Producing a CSS stylesheet that is mobile-friendly and implements the link coloring.
    css_content = """
/* Responsive base styling */
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  line-height: 1.6;
  padding: 15px;
  background: #f9f9f9;
  color: #333;
}

.container {
  max-width: 800px;
  margin: auto;
  background: #fff;
  padding: 20px;
  border-radius: 4px;
}

/* Header styling */
header {
  text-align: center;
  margin-bottom: 20px;
}

/* Link styling */
a {
  text-decoration: none;
}

/* External links will be styled normally (but they get an inline style) */
a.external {
  color: red;
}

a.local {
  color: blue;
}

/* Responsive images */
img {
  max-width: 100%;
  height: auto;
}

/* Mobile friendly adjustments */
@media (max-width: 600px) {
  body {
    padding: 5px;
  }
  .container {
    padding: 10px;
  }
  header a {
    font-size: 1.5em;
  }
}
"""
    try:
        with open(stylesheet_path, "w", encoding="utf-8") as css_file:
            css_file.write(css_content)
        logging.info("Created stylesheet: %s", stylesheet_path)
    except Exception as e:
        logging.error("Error writing stylesheet '%s': %s", stylesheet_path, e)
        raise

def process_html_file(input_path, output_path, menu_filename, stylesheet_filename):
    try:
        with open(input_path, "r", encoding="utf-8") as infile:
            contents = infile.read()
    except Exception as e:
        logging.error("Failed to read file '%s': %s", input_path, e)
        return

    try:
        soup = BeautifulSoup(contents, "html.parser")
    except Exception as e:
        logging.error("Failed to parse HTML in '%s': %s", input_path, e)
        return

    # Remove all JavaScript by removing <script> tags
    for script in soup.find_all("script"):
        script.decompose()

    # Remove all styling elements: <style> tags and any <link rel="stylesheet"> tags.
    for style in soup.find_all("style"):
        style.decompose()
    for link in soup.find_all("link", rel=lambda x: x and "stylesheet" in x.lower()):
        link.decompose()

    # Remove any elements with a class value that contains 'navigation-links'
    # (note that .get("class") returns a list if present)
    for elem in soup.find_all(class_=lambda classes: classes and any("navigation-links" in c for c in classes)):
        elem.decompose()

    # Extract the content of the <article> element in the page’s <body>
    article = soup.find("article")
    if not article:
        logging.warning("No <article> element found in file '%s'", input_path)
        return

    # Create a new minimal HTML document.
    new_soup = BeautifulSoup("<!DOCTYPE html><html><head></head><body></body></html>", "html.parser")
    head = new_soup.head
    body = new_soup.body

    # In the <head> section, include a reference to the stylesheet.
    new_link_tag = new_soup.new_tag("link", rel="stylesheet", href=stylesheet_filename)
    head.append(new_link_tag)

    # Optionally you can add a <meta charset="UTF-8"> tag.
    meta_tag = new_soup.new_tag("meta", charset="UTF-8")
    head.insert(0, meta_tag)

    # At the center at the top of each page, place a "Menu" link.
    menu_div = new_soup.new_tag("div", style="text-align:center; margin-bottom:20px;")
    menu_link = new_soup.new_tag("a", href=menu_filename, style="font-size:24px;")
    menu_link.string = "Menu"
    menu_div.append(menu_link)
    body.append(menu_div)

    # Append the content of the <article> element.
    # We use .contents to preserve inner structure.
    for element in article.contents:
        body.append(element)

    # Process all <a> tags to apply inline styling for link coloration.
    for a in new_soup.find_all("a"):
        href = a.get("href", "")
        # If href starts with "http" (or "https"), consider it external.
        if href.startswith("http://") or href.startswith("https://"):
            a['style'] = a.get('style', '') + " color: red;"
            # Optionally, you might add a CSS class:
            a['class'] = a.get('class', []) + ["external"]
        else:
            a['style'] = a.get('style', '') + " color: blue;"
            a['class'] = a.get('class', []) + ["local"]

    # Write the processed HTML to the output file.
    try:
        with open(output_path, "w", encoding="utf-8") as outfile:
            # Write the prettified (or you can choose .encode() version) HTML content.
            outfile.write(new_soup.prettify())
        logging.info("Successfully processed file '%s' -> '%s'", input_path, output_path)
    except Exception as e:
        logging.error("Error writing processed HTML for file '%s': %s", input_path, e)
        raise

def copy_images_directory(input_dir, output_dir):
    input_images = os.path.join(input_dir, "images")
    output_images = os.path.join(output_dir, "images")
    if os.path.isdir(input_images):
        try:
            # If the destination directory already exists, remove it first.
            if os.path.exists(output_images):
                shutil.rmtree(output_images)
            shutil.copytree(input_images, output_images)
            logging.info("Successfully copied images from '%s' to '%s'", input_images, output_images)
        except Exception as e:
            logging.error("Error copying images directory: %s", e)
            raise
    else:
        logging.warning("No images directory found in input directory '%s'", input_dir)

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Process Kotlin documentation HTML files to create a pared down documentation set."
    )
    parser.add_argument(
        "--input-dir",
        required=True,
        help="Input directory containing HTML files (at the first level) and an 'images' subdirectory."
    )
    parser.add_argument(
        "--output-dir",
        required=True,
        help="Output directory to store processed HTML files and the 'images' subdirectory."
    )
    parser.add_argument(
        "--menu",
        required=True,
        help="Filename (or URL) of the HTML menu page to link to from the processed pages."
    )
    parser.add_argument(
        "--stylesheet",
        required=True,
        help="Filename of the CSS stylesheet to generate and include in every processed HTML page."
    )
    parser.add_argument(
        "--log",
        required=True,
        help="Path to the log file for processing messages and error tracebacks."
    )
    return parser.parse_args()

def main():
    args = parse_arguments()
    try:
        # Set up logging.
        setup_logging(args.log)
    
        # Ensure the output directory exists.
        if not os.path.isdir(args.output_dir):
            os.makedirs(args.output_dir)
            logging.info("Created output directory '%s'", args.output_dir)
    
        # Create the CSS stylesheet file inside the output directory.
        stylesheet_path = os.path.join(args.output_dir, args.stylesheet)
        create_responsive_stylesheet(stylesheet_path)
    
        # Process each HTML file in the input directory (only immediate files with .html extension).
        for name in os.listdir(args.input_dir):
            input_filepath = os.path.join(args.input_dir, name)
            if os.path.isfile(input_filepath) and name.lower().endswith(".html"):
                output_filepath = os.path.join(args.output_dir, name)
                try:
                    process_html_file(input_filepath, output_filepath, args.menu, args.stylesheet)
                except Exception as inner_exc:
                    # Log the exception for this file.
                    logging.error("Exception encountered processing file '%s': %s", input_filepath, inner_exc)
                    logging.error(traceback.format_exc())
                    # Optionally, you could continue processing other files instead of aborting.
                    sys.exit(1)
    
        # Copy the "images" subdirectory from input to output.
        copy_images_directory(args.input_dir, args.output_dir)
    
    except Exception as e:
        # Log the full traceback and terminate.
        logging.error("Fatal error encountered:")
        logging.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()

------------------------------------------------------------

Explanation of the Code:

1. The script uses argparse to accept five command–line arguments:
   • --input-dir: The directory with the original HTML files and an “images” folder.
   • --output-dir: The directory where the processed HTML and copied images folder will be stored.
   • --menu: The filename (or URL) of the menu page to link at the top of each output page.
   • --stylesheet: The name of the CSS stylesheet file that will be generated and linked.
   • --log: The path to the log file.

2. Logging is configured so that every processed file generates a log message. If a file has no <article> element,
   a warning message is written.

3. The function process_html_file() uses BeautifulSoup to:
   • Remove all <script> tags (both inline and external) and <style> tags.
   • Remove any <link rel="stylesheet"> tags.
   • Remove any element that has a class with the substring "navigation-links".
   • Extract the <article> element. (If none is found, a message is logged.)
   • Constructs a new HTML document with a proper DOCTYPE, <html>, <head>, and <body>, including:
         – A link to the generated stylesheet.
         – A centered “Menu” link.
         – The preserved <article> content.
         – Adjusted <a> tags with inline styles coloring them red (external) or blue (local).
       
4. The images subdirectory is copied from the input directory to the output directory.

5. The create_responsive_stylesheet() function writes a mobile‐friendly CSS file that includes some basic responsive
   formatting and our required link coloring. (Note that the processed HTML files still add inline styles to all <a> tags.)

6. If any exception occurs anywhere in processing (e.g. while reading files, writing output, or in BeautifulSoup),
   the complete traceback is logged and the script exits immediately.

You can run this script from the command line as follows:

  python3 process_docs.py --input-dir /path/to/input --output-dir /path/to/output --menu menu.html --stylesheet doc_style.css --log process.log

This script should then process each input HTML file as detailed and log every action and any errors encountered.