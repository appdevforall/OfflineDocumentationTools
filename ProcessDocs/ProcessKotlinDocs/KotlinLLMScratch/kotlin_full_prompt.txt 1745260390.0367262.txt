Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

All command line arguments will be processed with Python's argparse library and will have human-readable flag names and usage messages.

If an exception or error in the Python code is encountered, write the full traceback information including line numbers to the log and then terminate the program.

In the input directory, individually process each file with a ".html" extension following these instructions placed between two "~~~" delimiter strings.

~~~
Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags
- If a file contains no <article> element, write a message indicating this in the log file that includes the file name and do not copy the file.
- All links to external content will be styled in red. All links to local files will be styled in blue.
- At the center of the top of each page, placed a link with the text "Menu" in large font that links to a separately-generated HTML menu for navigation these documentation pages. The name of the file to link to will be provided as a command line argument.
- Style all elements with a "class" attribute value containing "code-block" so they display as monospace-font code blocks that are separate from the text in which they appear. Preserve all newlines and whitespaces in the code so it appears in the same human-readable format as what is in the source document.
- Remove all elements with a "class" attribute value containing "naviation-links".
~~~

Produce a CSS stylesheet that styles the page in an attractive, mobile-friendly format that follows the principles of responsive design and implements the link coloration specified above. The name of this stylesheet will be provided as a command line argument. Include this stylesheet in every processed HTML page.

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".
Here is an example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

Here is another example of a page in the Kotlin documentation placed between two "~~~" delimiter strings:
~~~
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2025-04-18T20:47:07.948298142"><title>Migrate to Kotlin code style | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"kotlin-coding-conventions-and-intellij-idea-formatter","level":0,"title":"Kotlin coding conventions and IntelliJ IDEA formatter","anchor":"#kotlin-coding-conventions-and-intellij-idea-formatter"},{"id":"differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style","level":0,"title":"Differences between \"Kotlin coding conventions\" and \"IntelliJ IDEA default code style\"","anchor":"#differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style"},{"id":"migration-to-a-new-code-style-discussion","level":0,"title":"Migration to a new code style discussion","anchor":"#migration-to-a-new-code-style-discussion"},{"id":"migration-to-a-new-code-style","level":0,"title":"Migration to a new code style","anchor":"#migration-to-a-new-code-style"},{"id":"in-gradle","level":1,"title":"In Gradle","anchor":"#in-gradle"},{"id":"in-maven","level":1,"title":"In Maven","anchor":"#in-maven"},{"id":"store-old-code-style-in-project","level":0,"title":"Store old code style in project","anchor":"#store-old-code-style-in-project"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="Migrate to Kotlin code style | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/code-style-migration-guide.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="Migrate to Kotlin code style | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/code-style-migration-guide.html#webpage",
    "url": "writerside-documentation/code-style-migration-guide.html",
    "name": "Migrate to Kotlin code style | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="code-style-migration-guide" data-main-title="Migrate to Kotlin code style" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Tools"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="code-style-migration-guide" id="code-style-migration-guide.md">Migrate to Kotlin code style</h1><section class="chapter"><h2 id="kotlin-coding-conventions-and-intellij-idea-formatter" data-toc="kotlin-coding-conventions-and-intellij-idea-formatter">Kotlin coding conventions and IntelliJ IDEA formatter</h2><p id="z46taud_7"><a href="coding-conventions.html" id="z46taud_12" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Kotlin coding conventions</a> affect several aspects of writing idiomatic Kotlin, and a set of formatting recommendations aimed at improving Kotlin code readability is among them.</p><p id="z46taud_8">Unfortunately, the code formatter built into IntelliJ IDEA had to work long before this document was released and now has a default setup that produces different formatting from what is now recommended.</p><p id="z46taud_9">It may seem a logical next step to remove this obscurity by switching the defaults in IntelliJ IDEA and make formatting consistent with the Kotlin coding conventions. But this would mean that all the existing Kotlin projects will have a new code style enabled the moment the Kotlin plugin is installed. Not really the expected result for plugin update, right?</p><p id="z46taud_10">That's why we have the following migration plan instead:</p><ul class="list _bullet" id="z46taud_11"><li class="list__item" id="z46taud_13"><p id="z46taud_17">Enable the official code style formatting by default starting from Kotlin 1.3 and only for new projects (old formatting can be enabled manually)</p></li><li class="list__item" id="z46taud_14"><p id="z46taud_18">Authors of existing projects may choose to migrate to the Kotlin coding conventions</p></li><li class="list__item" id="z46taud_15"><p id="z46taud_19">Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</p></li><li class="list__item" id="z46taud_16"><p id="z46taud_20">Switch to the default formatting and make it consistent with Kotlin coding conventions in Kotlin 1.4</p></li></ul></section><section class="chapter"><h2 id="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style" data-toc="differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style">Differences between &quot;Kotlin coding conventions&quot; and &quot;IntelliJ IDEA default code style&quot;</h2><p id="z46taud_21">The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin coding conventions, it's recommended to use a single indent in cases where the long continuation indent has been forced before.</p><figure id="z46taud_22"><img alt="Code formatting" src="images/code-formatting-diff.png" title="Code formatting" width="700" height="192"></figure><p id="z46taud_23">In practice, quite a bit of code is affected, so this can be considered a major code style update.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style-discussion" data-toc="migration-to-a-new-code-style-discussion">Migration to a new code style discussion</h2><p id="z46taud_24">A new code style adoption might be a very natural process if it starts with a new project, when there's no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the <a href="coding-conventions.html" id="z46taud_30" data-tooltip="Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.">Coding conventions</a> document which is enabled by default.</p><p id="z46taud_25">Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</p><p id="z46taud_26">The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" id="z46taud_31" data-external="true" rel="noopener noreferrer" target="_blank">&quot;Annotate Previous Revision&quot;</a> can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</p><p id="z46taud_27">Also migrating can be harder for larger teams because committing a lot of files in several subsystems may produce merging conflicts in personal branches. And while each conflict resolution is usually trivial, it's still wise to know if there are large feature branches currently in work.</p><p id="z46taud_28">In general, for small projects, we recommend converting all the files at once.</p><p id="z46taud_29">For medium and large projects the decision may be tough. If you are not ready to update many files right away you may decide to migrate module by module, or continue with gradual migration for modified files only.</p></section><section class="chapter"><h2 id="migration-to-a-new-code-style" data-toc="migration-to-a-new-code-style">Migration to a new code style</h2><p id="z46taud_32">Switching to the Kotlin Coding Conventions code style can be done in <span class="control" id="z46taud_37">Settings/Preferences</span> | <span class="control" id="z46taud_38">Editor</span> | <span class="control" id="z46taud_39">Code Style</span> | <span class="control" id="z46taud_40">Kotlin</span> dialog. Switch scheme to <span class="control" id="z46taud_41">Project</span> and activate <span class="control" id="z46taud_42">Set from...</span> | <span class="control" id="z46taud_43">Kotlin style guide</span>.</p><p id="z46taud_33">In order to share those changes for all project developers <code class="code" id="z46taud_44">.idea/codeStyle</code> folder have to be committed to VCS.</p><p id="z46taud_34">If an external build system is used for configuring the project, and it's been decided not to share <code class="code" id="z46taud_45">.idea/codeStyle</code> folder, Kotlin coding conventions can be forced with an additional property:</p><section class="chapter"><h3 id="in-gradle" data-toc="in-gradle">In Gradle</h3><p id="z46taud_46">Add <code class="code" id="z46taud_47">kotlin.code.style=official</code> property to the <code class="code" id="z46taud_48">gradle.properties</code> file at the project root and commit the file to VCS.</p></section><section class="chapter"><h3 id="in-maven" data-toc="in-maven">In Maven</h3><p id="z46taud_49">Add <code class="code" id="z46taud_55">kotlin.code.style official</code> property to root <code class="code" id="z46taud_56">pom.xml</code> project file.</p><div class="code-block" data-lang="none">
&lt;properties&gt;
  &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt;
&lt;/properties&gt;
</div><aside class="prompt" data-type="warning" data-title="" id="z46taud_51"><p id="z46taud_57">Having the <span class="control" id="z46taud_58">kotlin.code.style</span> option set may modify the code style scheme during a project import and may change the code style settings.</p></aside><p id="z46taud_52">After updating your code style settings, activate <span class="control" id="z46taud_59">Reformat Code</span> in the project view on the desired scope.</p><figure id="z46taud_53"><img alt="Reformat code" src="images/reformat-code.png" title="Reformat code" width="500" height="380"></figure><p id="z46taud_54">For a gradual migration, it's possible to enable the <span class="control" id="z46taud_60">File is not formatted according to project settings</span> inspection. It will highlight the places that should be reformatted. After enabling the <span class="control" id="z46taud_61">Apply only to modified files</span> option, inspection will show formatting problems only in modified files. Such files are probably going to be committed soon anyway.</p></section></section><section class="chapter"><h2 id="store-old-code-style-in-project" data-toc="store-old-code-style-in-project">Store old code style in project</h2><p id="z46taud_62">It's always possible to explicitly set the IntelliJ IDEA code style as the correct code style for the project:</p><ol class="list _decimal" id="z46taud_63" type="1"><li class="list__item" id="z46taud_65"><p id="z46taud_67">In <span class="control" id="z46taud_68">Settings/Preferences</span> | <span class="control" id="z46taud_69">Editor</span> | <span class="control" id="z46taud_70">Code Style</span> | <span class="control" id="z46taud_71">Kotlin</span>, switch to the <span class="control" id="z46taud_72">Project</span> scheme.</p></li><li class="list__item" id="z46taud_66"><p id="z46taud_73">Open the <span class="control" id="z46taud_74">Load/Save</span> tab and in the <span class="control" id="z46taud_75">Use defaults from</span> select <span class="control" id="z46taud_76">Kotlin obsolete IntelliJ IDEA codestyle</span>.</p></li></ol><p id="z46taud_64">In order to share the changes across the project developers <code class="code" id="z46taud_77">.idea/codeStyle</code> folder, it has to be committed to VCS. Alternatively, <span class="control" id="z46taud_78">kotlin.code.style</span>=<span class="control" id="z46taud_79">obsolete</span> can be used for projects configured with Gradle or Maven.</p></section><div class="last-modified">19 April 2025</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="kotlin-ide.html" class="navigation-links__prev">IDEs for Kotlin development</a><a href="kotlin-notebook-overview.html" class="navigation-links__next">Kotlin Notebook</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>
~~~

RESPONSE

Below is one complete Python script that meets the requirements. You can save it as, for example, “pare_down_kotlin_docs.py”. Make sure you have installed BeautifulSoup (e.g. via “pip install beautifulsoup4”) before running it.

Below is the full code:

------------------------------------------------------------
#!/usr/bin/env python3
"""
This script processes Kotlin documentation HTML pages in an input directory
by removing JavaScript, page styling, navigation-link elements, and then extracting
the <article> element content. It also processes links and code blocks as specified.
The output pages are placed in an output directory with a standard HTML skeleton,
with an added “Menu” link at the top (the menu file is provided by a command‐line
argument). A CSS stylesheet is generated in the output directory with a given name.
The images subdirectory is also copied.
All events (successful processing or errors) are logged to a file.
"""

import os
import sys
import argparse
import logging
import shutil
import traceback
from bs4 import BeautifulSoup

def setup_logging(log_path):
    logging.basicConfig(filename=log_path,
                        level=logging.INFO,
                        format='%(asctime)s [%(levelname)s] %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

def process_html_file(input_filepath, output_filepath, menu_filename, stylesheet_filename):
    """
    Process a single .html file:
      - Removes all <script> and <style> tags, and also all <link> tags that refer to stylesheets.
      - Removes any element whose "class" attribute includes "navigation-links" or "naviation-links".
      - Extracts the content of the first <article> element. If none exists the file is skipped.
      - Processes all <a> tags: external links are given inline red color; local links blue.
      - For any element with class containing "code-block", add inline CSS to display as a preformatted, monospace block.
      - Wrap the processed article content inside a new HTML document that includes:
            • A <head> with a link to the given stylesheet.
            • A <body> starting with a centered “Menu” link that points to the given menu file.
    """
    try:
        with open(input_filepath, "r", encoding="utf-8") as f:
            html_content = f.read()
    except Exception as e:
        logging.error("Error reading file %s: %s", input_filepath, e)
        return False

    try:
        soup = BeautifulSoup(html_content, "html.parser")

        # Remove all <script> tags.
        for script in soup.find_all("script"):
            script.decompose()

        # Remove all <style> tags.
        for style in soup.find_all("style"):
            style.decompose()

        # Remove <link> tags that are stylesheets.
        for link in soup.find_all("link", rel=lambda x: x and "stylesheet" in x.lower()):
            link.decompose()

        # Remove any element whose class includes 'navigation-links' or the misspelling 'naviation-links'
        for tag in soup.find_all(class_=lambda value: value and ("navigation-links" in " ".join(value) or "naviation-links" in " ".join(value))):
            tag.decompose()

        # Find the first article in the file.
        article = soup.find("article")
        if not article:
            logging.info("No <article> element found in %s; skipping.", os.path.basename(input_filepath))
            return False

        # Process links: style external links red, local links blue.
        for a in article.find_all("a"):
            href = a.get("href", "")
            # Assume that if href starts with "http://" or "https://", it is external.
            if href.startswith("http://") or href.startswith("https://"):
                # Append inline style; if already present, append to it.
                style = a.get("style", "")
                a['style'] = style + "color: red !important;"
            else:
                style = a.get("style", "")
                a['style'] = style + "color: blue !important;"

        # Process code-blocks: add inline style for monospace font and pre-wrapped formatting.
        for code_block in article.find_all(class_=lambda value: value and "code-block" in " ".join(value)):
            existing_style = code_block.get("style", "")
            # Setting monospace font, preserving white-space, and giving a light background.
            code_block["style"] = existing_style + "font-family: monospace; white-space: pre-wrap; background-color: #f6f8fa; padding: 10px; border: 1px solid #ddd;"

        # Create a new BeautifulSoup document for the output
        new_soup = BeautifulSoup("", "html.parser")

        # Build the HTML structure.
        html_tag = new_soup.new_tag("html")
        head_tag = new_soup.new_tag("head")
        meta_charset = new_soup.new_tag("meta", charset="UTF-8")
        head_tag.append(meta_charset)
        title_tag = new_soup.new_tag("title")
        # Reuse the original title if it exists, otherwise leave a default title.
        original_title = soup.title.string if soup.title else os.path.basename(input_filepath)
        title_tag.string = original_title
        head_tag.append(title_tag)
        # Link the stylesheet (using the provided stylesheet filename; assumed relative path)
        link_tag = new_soup.new_tag("link", rel="stylesheet", href=stylesheet_filename)
        head_tag.append(link_tag)

        # For responsive design add a viewport meta tag.
        viewport_tag = new_soup.new_tag("meta", name="viewport", content="width=device-width, initial-scale=1")
        head_tag.append(viewport_tag)

        html_tag.append(head_tag)

        body_tag = new_soup.new_tag("body")
        # Add centered Menu link at the top.
        center_div = new_soup.new_tag("div", style="text-align:center; margin: 20px 0;")
        menu_link = new_soup.new_tag("a", href=menu_filename, style="font-size: xx-large; text-decoration: none;")
        menu_link.string = "Menu"
        center_div.append(menu_link)
        body_tag.append(center_div)

        # Append the content of the <article> element.
        # Use .contents rather than .string to preserve tag hierarchy.
        for content in article.contents:
            body_tag.append(content)

        html_tag.append(body_tag)
        new_soup.append(html_tag)

        # Write the new HTML document to the output file.
        with open(output_filepath, "w", encoding="utf-8") as outf:
            outf.write(new_soup.prettify())

        logging.info("Successfully processed file %s", os.path.basename(input_filepath))
        return True

    except Exception as e:
        logging.error("Error processing file %s: %s\n%s", os.path.basename(input_filepath), e, traceback.format_exc())
        return False

def generate_css(stylesheet_path):
    """
    Produce a CSS stylesheet that is mobile friendly and responsive.
    Styles include:
      - A global sans-serif font.
      - Responsive layout (viewport meta tag is in HTML).
      - External links styled red and local links blue.
      - A definition for code blocks that displays them in monospace with preserved whitespace.
    """
    css_content = """
/* Base style */
body {
    margin: 0;
    padding: 20px;
    font-family: Arial, sans-serif;
    line-height: 1.6;
    background-color: #ffffff;
    color: #333333;
}

/* Responsive container */
.container {
    max-width: 800px;
    margin: auto;
    padding: 0 10px;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    margin-top: 1.2em;
    margin-bottom: 0.5em;
}

/* Links */
a {
    text-decoration: none;
}

/* External links (can be overridden by inline styles) */
a[href^="http://"],
a[href^="https://"] {
    color: red;
}

/* Local links */
a:not([href^="http://"]):not([href^="https://"]) {
    color: blue;
}

/* Code blocks styling */
.code-block {
    font-family: monospace;
    white-space: pre-wrap;
    background-color: #f6f8fa;
    padding: 10px;
    border: 1px solid #ddd;
    overflow-x: auto;
}

/* Make images responsive */
img {
    max-width: 100%;
    height: auto;
}

/* Mobile first responsive design */
@media only screen and (max-width: 480px) {
    body {
        padding: 10px;
        font-size: 16px;
    }
}
"""
    try:
        with open(stylesheet_path, "w", encoding="utf-8") as css_file:
            css_file.write(css_content)
        logging.info("Successfully generated stylesheet at %s", stylesheet_path)
    except Exception as e:
        logging.error("Error writing stylesheet %s: %s\n%s", stylesheet_path, e, traceback.format_exc())
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Pare down Kotlin documentation HTML pages for limited-storage devices.")
    parser.add_argument("--input-dir", required=True,
                        help="Path to the input directory containing HTML files and an 'images' subdirectory.")
    parser.add_argument("--output-dir", required=True,
                        help="Path to the output directory where processed HTML files and images will be placed.")
    parser.add_argument("--menu-file", required=True,
                        help="Filename for the navigation menu HTML page to link at the top of every page.")
    parser.add_argument("--stylesheet", required=True,
                        help="Filename for the CSS stylesheet to be generated and linked in every output page.")
    parser.add_argument("--log-file", required=True,
                        help="Path to the log file for recording processing messages.")

    args = parser.parse_args()

    try:
        setup_logging(args.log_file)
        logging.info("Started processing with input dir: %s, output dir: %s", args.input_dir, args.output_dir)

        # Create the output directory if it doesn't exist.
        if not os.path.exists(args.output_dir):
            os.makedirs(args.output_dir)

        # Process HTML files in the input directory (only files in the immediate directory ending with .html).
        for filename in os.listdir(args.input_dir):
            input_path = os.path.join(args.input_dir, filename)
            if os.path.isfile(input_path) and filename.lower().endswith(".html"):
                output_file_path = os.path.join(args.output_dir, filename)
                process_html_file(input_path, output_file_path, args.menu_file, args.stylesheet)

        # Generate the CSS stylesheet in the output directory.
        stylesheet_path = os.path.join(args.output_dir, args.stylesheet)
        generate_css(stylesheet_path)

        # Copy the 'images' subdirectory from input to output.
        input_images_dir = os.path.join(args.input_dir, "images")
        output_images_dir = os.path.join(args.output_dir, "images")
        if os.path.exists(input_images_dir) and os.path.isdir(input_images_dir):
            # If output_images_dir exists, remove it first.
            if os.path.exists(output_images_dir):
                shutil.rmtree(output_images_dir)
            shutil.copytree(input_images_dir, output_images_dir)
            logging.info("Successfully copied images directory.")
        else:
            logging.info("No images directory found in input; skipping images copy.")

        logging.info("Processing complete.")

    except Exception as e:
        # Log full traceback if there's any exception.
        logging.error("Unhandled exception: %s\n%s", e, traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()

------------------------------------------------------------

How the script works:

1. The script uses argparse to read five command‐line arguments:
   • --input-dir: Directory containing source HTML files (and “images” subdirectory).
   • --output-dir: Directory to write results.
   • --menu-file: The filename (e.g. “menu.html”) for the “Menu” link inserted at the top of every page.
   • --stylesheet: The output stylesheet filename.
   • --log-file: The log file where all processing messages (and errors with tracebacks) are recorded.

2. For each HTML file in the top level of the input directory:
   • It opens and processes the file with BeautifulSoup.
   • It removes all JavaScript (<script> tags), styling (<style> and stylesheet <link> tags),
     and any elements whose class attribute contains “navigation-links” (or the similarly misspelled “naviation-links”).
   • If no <article> element is found, the file is skipped with a log entry.
   • Else, the content of the <article> element is wrapped with a new HTML skeleton.
   • A “Menu” link is inserted at the top of the <body>, and all <a> tags are given inline styles
     based on whether they point to an external or local resource.
   • Code blocks (elements with class “code-block”) are given inline style for monospace display.
   • The processed HTML document is then written to the output directory with the same base filename.

3. A CSS stylesheet is generated (with mobile-friendly and responsive rules) and written to the output directory.

4. Finally, the “images” subdirectory (if it exists) is copied from the input directory to the output directory.

5. Logging is performed at every step. If any exception occurs, the full traceback is written to the log and the program terminates.

You can run the script from the command line as follows (adjust the paths as needed):

  python pare_down_kotlin_docs.py --input-dir path/to/input --output-dir path/to/output --menu-file menu.html --stylesheet style.css --log-file process.log

This script should meet the requirements for paring down the Kotlin documentation HTML pages for devices with limited storage space.