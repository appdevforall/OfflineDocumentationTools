Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

In the input directory, individually process each file with a ".html" extension following these instructions which are delimited by a "~~~" string at the beginning and a "~~~" string at the end.

~~~

Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- In the <head> section of the output document, include a reference to a stylesheet file called 'doc_style.css' which will be generated separately at a later point in time.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags

~~~

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

If a file contains no <article> element, write a message in the log file that includes the name of the file.

Here is an example of a page in the Kotlin documentation:
"""
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>


RESPONSE

#!/usr/bin/env python3
"""
This script processes Kotlin documentation HTML files by stripping out unwanted elements –
JavaScript, styling, and navigation links – and then extracting the content of the <article>
element into a new minimal HTML document. It also copies the entire "images" subdirectory
from the input directory to the output directory. A log file records every file processed,
and notes errors encountered or if a file has no <article> element.

Usage:
    python process_docs.py <input_directory> <output_directory> <log_file_path>
"""

import os
import sys
import shutil
import logging
from bs4 import BeautifulSoup

def setup_logging(log_file_path):
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s: %(message)s',
        handlers=[
            logging.FileHandler(log_file_path, mode='w', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def remove_scripts_and_styles(soup):
    # remove all script tags
    for script in soup.find_all('script'):
        script.decompose()
    # remove all inline styling tags (i.e., <style>)
    for style in soup.find_all('style'):
        style.decompose()
    # remove any link tag referencing external stylesheets.  We want to remove all styling (they are not needed)
    for link in soup.find_all('link', rel='stylesheet'):
        link.decompose()
    # There is no need to remove inline style attributes on elements per instructions,
    # but if desired we can remove 'style' attributes from all tags:
    for tag in soup.find_all(True):
        if tag.has_attr('style'):
            del tag['style']
    return soup

def remove_navigation_links(soup):
    # Remove any element where the 'class' attribute value contains "navigation-links"
    # Since classes can be multiple, we check for any class value that contains the substring.
    # Iterate over a copy of all tags so that removal doesn't affect the iteration.
    for tag in soup.find_all(True):
        if tag.has_attr('class'):
            # check if any class value includes 'navigation-links'
            if any("navigation-links" in class_name for class_name in tag.get("class", [])):
                tag.decompose()  # remove the tag completely
    return soup

def process_html_file(input_filepath, output_filepath):
    try:
        with open(input_filepath, 'r', encoding='utf-8') as f:
            contents = f.read()
    except Exception as e:
        logging.error("Failed to read file '%s': %s", input_filepath, e)
        return

    try:
        soup = BeautifulSoup(contents, 'html.parser')

        # Remove JavaScript and styling from the original soup
        soup = remove_scripts_and_styles(soup)

        # Remove navigation-links elements
        soup = remove_navigation_links(soup)

        # Find the <article> element that contains the main content
        article = soup.find('article')
        if not article:
            logging.warning("File '%s' has no <article> element.", os.path.basename(input_filepath))
            article_content = ""
        else:
            # We extract the inner content of the <article>
            article_content = ''.join(str(child) for child in article.contents)

        # Create a new BeautifulSoup document with minimal HTML structure
        new_soup = BeautifulSoup('<html><head></head><body></body></html>', 'html.parser')

        # Add stylesheet reference in the <head>
        head_tag = new_soup.head
        stylesheet_tag = new_soup.new_tag('link', rel='stylesheet', href='doc_style.css')
        head_tag.append(stylesheet_tag)

        # Place the article content into the body
        body_tag = new_soup.body
        if article_content:
            # Append parsed article content so that the HTML structure is preserved.
            article_fragment = BeautifulSoup(article_content, 'html.parser')
            body_tag.append(article_fragment)
        else:
            # No article content was found; body remains empty.
            pass

        # Write the new HTML to the output file
        with open(output_filepath, 'w', encoding='utf-8') as outf:
            outf.write(str(new_soup.prettify()))

        logging.info("Successfully processed file '%s'.", os.path.basename(input_filepath))
    except Exception as e:
        logging.error("Error processing file '%s': %s", os.path.basename(input_filepath), e)

def copy_images_directory(input_dir, output_dir):
    src_images_dir = os.path.join(input_dir, "images")
    dst_images_dir = os.path.join(output_dir, "images")
    if os.path.exists(src_images_dir) and os.path.isdir(src_images_dir):
        try:
            # If destination exists, remove it so the copy is clean.
            if os.path.exists(dst_images_dir):
                shutil.rmtree(dst_images_dir)
            shutil.copytree(src_images_dir, dst_images_dir)
            logging.info("Successfully copied images directory.")
        except Exception as e:
            logging.error("Failed to copy images directory: %s", e)
    else:
        logging.warning("No images directory found in input directory.")

def main():
    if len(sys.argv) != 4:
        print("Usage: python process_docs.py <input_directory> <output_directory> <log_file_path>")
        sys.exit(1)

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]
    log_file_path = sys.argv[3]

    setup_logging(log_file_path)

    if not os.path.exists(input_dir):
        logging.error("Input directory '%s' does not exist.", input_dir)
        sys.exit(1)

    # Create output directory if it does not exist.
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
        except Exception as e:
            logging.error("Could not create output directory '%s': %s", output_dir, e)
            sys.exit(1)

    # Process each HTML file in the input directory (only immediate files, not subdirectories)
    for filename in os.listdir(input_dir):
        if filename.lower().endswith(".html"):
            input_filepath = os.path.join(input_dir, filename)
            output_filepath = os.path.join(output_dir, filename)
            process_html_file(input_filepath, output_filepath)

    # Copy images directory
    copy_images_directory(input_dir, output_dir)

if __name__ == "__main__":
    main()