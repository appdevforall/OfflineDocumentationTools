Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

In the input directory, individually process each file with a ".html" extension following these instructions which are delimited by a "~~~" string at the beginning and a "~~~" string at the end.

~~~

Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.

- Strip out all page styling.

- In the <head> section of the output document, include a reference to a stylesheet file called 'doc_style.css' which will be generated separately at a later point in time.

- Remove any element where the 'class' attribute value contains the string 'navigation-links'.

- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags

~~~

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

Here is an example of a page in the Kotlin documentation:
"""
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>

--
Certainly! Below is a Python script that accomplishes the task you've described. This script uses the `BeautifulSoup` library to parse and process HTML files, removes unwanted elements and attributes, and structures the content as specified. It also handles copying the `images` subdirectory from the input to the output directory.

### Prerequisites

Before running the script, ensure you have the required libraries installed. You can install them using `pip`:

```bash
pip install beautifulsoup4
```

### The Script

Save the following script as, for example, `pare_down_kotlin_docs.py`:

```python
import os
import sys
import shutil
from bs4 import BeautifulSoup, Comment

def process_html_file(input_file_path, output_file_path):
    with open(input_file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file, 'html.parser')

    # Remove all <script> tags
    for script in soup.find_all('script'):
        script.decompose()

    # Remove all <style> tags
    for style in soup.find_all('style'):
        style.decompose()

    # Remove all 'style' attributes
    for tag in soup.find_all(True):
        if 'style' in tag.attrs:
            del tag.attrs['style']

    # Remove elements with class containing 'navigation-links'
    for tag in soup.find_all(class_=lambda x: x and 'navigation-links' in x):
        tag.decompose()

    # Extract the <article> content
    article = soup.find('article')
    if not article:
        print(f"Warning: <article> tag not found in {input_file_path}. Skipping file.")
        return

    # Create a new BeautifulSoup object for the output
    new_soup = BeautifulSoup('', 'html.parser')

    # Create <html> tag
    html_tag = new_soup.new_tag('html', lang="en")
    new_soup.append(html_tag)

    # Create <head> tag
    head_tag = new_soup.new_tag('head')
    html_tag.append(head_tag)

    # Add meta charset
    meta_charset = new_soup.new_tag('meta', charset='UTF-8')
    head_tag.append(meta_charset)

    # Add link to 'doc_style.css'
    link_tag = new_soup.new_tag('link', rel='stylesheet', href='doc_style.css')
    head_tag.append(link_tag)

    # Create <body> tag
    body_tag = new_soup.new_tag('body')
    html_tag.append(body_tag)

    # Append the article content to <body>
    body_tag.append(article)

    # Write the new HTML to the output file
    with open(output_file_path, 'w', encoding='utf-8') as file:
        file.write(str(new_soup.prettify(formatter="html")))

def copy_images(input_dir, output_dir):
    images_input_path = os.path.join(input_dir, 'images')
    images_output_path = os.path.join(output_dir, 'images')

    if os.path.exists(images_input_path) and os.path.isdir(images_input_path):
        shutil.copytree(images_input_path, images_output_path, dirs_exist_ok=True)
        print(f"Copied 'images' directory to {images_output_path}.")
    else:
        print(f"No 'images' directory found in {input_dir}. Skipping image copy.")

def main():
    if len(sys.argv) != 3:
        print("Usage: python pare_down_kotlin_docs.py <input_directory> <output_directory>")
        sys.exit(1)

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]

    # Validate input directory
    if not os.path.exists(input_dir):
        print(f"Error: Input directory '{input_dir}' does not exist.")
        sys.exit(1)
    if not os.path.isdir(input_dir):
        print(f"Error: '{input_dir}' is not a directory.")
        sys.exit(1)

    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Process each .html file in the input directory (first level only)
    for item in os.listdir(input_dir):
        input_item_path = os.path.join(input_dir, item)
        if os.path.isfile(input_item_path) and item.lower().endswith('.html'):
            output_item_path = os.path.join(output_dir, item)
            print(f"Processing '{input_item_path}'...")
            try:
                process_html_file(input_item_path, output_item_path)
                print(f"Saved processed file to '{output_item_path}'.")
            except Exception as e:
                print(f"Error processing '{input_item_path}': {e}")

    # Copy the 'images' subdirectory
    copy_images(input_dir, output_dir)

if __name__ == "__main__":
    main()
```

### How the Script Works

1. **Argument Parsing**: The script expects two command-line arguments:
   - **Input Directory**: The directory containing the original HTML files and the `images` subdirectory.
   - **Output Directory**: The directory where the processed HTML files and the copied `images` subdirectory will be saved.

   Example usage:
   ```bash
   python pare_down_kotlin_docs.py path/to/input_dir path/to/output_dir
   ```

2. **Processing HTML Files**:
   - **Parsing**: Each `.html` file in the input directory is parsed using BeautifulSoup.
   - **Removing Scripts**: All `<script>` tags (both external and inline JavaScript) are removed.
   - **Removing Styles**:
     - All `<style>` tags are removed.
     - All `style` attributes are stripped from remaining tags.
   - **Removing Navigation Links**: Any element with a `class` attribute containing the substring `navigation-links` is removed.
   - **Extracting Content**: The content within the `<article>` tag is extracted.
   - **Creating New HTML Structure**: A new HTML document is created with standard `<html>`, `<head>`, and `<body>` tags. The `<head>` includes a link to `doc_style.css`.
   - **Saving Output**: The new HTML content is saved in the output directory with the same filename as the original.

3. **Copying Images Subdirectory**:
   - The script checks for the presence of an `images` subdirectory in the input directory.
   - If found, it copies the entire `images` directory to the output directory.

4. **Error Handling**:
   - The script includes checks for the existence of the input directory and proper handling of missing `<article>` tags.
   - Warnings are printed for any HTML files that don't contain an `<article>` tag, and those files are skipped.

### Example Usage

Assuming you have the following directory structure:

```
kotlin_docs/
├── images/
│   ├── image1.png
│   └── image2.png
├── this-expressions.html
├── another-page.html
└── ... other HTML files ...
```

Run the script as follows:

```bash
python pare_down_kotlin_docs.py kotlin_docs processed_docs
```

After execution, the `processed_docs` directory will contain:

```
processed_docs/
├── images/
│   ├── image1.png
│   └── image2.png
├── this-expressions.html
├── another-page.html
└── ... other processed HTML files ...
```

Each HTML file in `processed_docs` will have the unwanted JavaScript and styling removed, references to `doc_style.css` included, and only the content within the `<article>` tag preserved.

### Additional Notes

- **Stylesheet (`doc_style.css`)**: The script assumes that a `doc_style.css` file will be provided separately. Ensure that this CSS file is placed appropriately in the output directory or adjust the script to reference its correct path.

- **BeautifulSoup Parser**: The script uses the default `html.parser`. For more robust parsing (especially with malformed HTML), you might consider using `lxml` by installing it (`pip install lxml`) and specifying `BeautifulSoup(file, 'lxml')`.

- **Python Version**: This script is compatible with Python 3.x. Ensure you're using a compatible Python version.

- **Permissions**: Ensure that you have the necessary read permissions for the input directory and write permissions for the output directory.

### Conclusion

This script should effectively pare down the Kotlin documentation HTML files as per your specifications, making them suitable for storage on devices with limited space. Feel free to modify and extend the script based on any additional requirements or specific edge cases you might encounter.