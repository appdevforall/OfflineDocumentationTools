Write a Python script that uses BeautifulSoup to pare down HTML files containing Kotlin documentation pages to create a documentation set that can be stored on a device with limited storage space.

The first argument provided to the script will be the input directory, which is a directory that contains all HTML files to be processed in the immediate first level and all media in the "images" subdirectory. The second argument will be the output directory in which the output HTML files and the contents of the 'images' directory are placed.

Write a log message for every encountered file and note whether it was successfully processed or if any errors were encountered. The path to the log file will be provided as a command line argument.

If an exception or error in the Python code is encountered, write the full traceback information including line numbers to the log and then terminate the program.

In the input directory, individually process each file with a ".html" extension following these instructions which are delimited by a "~~~" string at the beginning and a "~~~" string at the end.

~~~

Place the processed HTML into a new HTML document in the output directory with the same base filename as the original. This new HTML document will follow the <html>, <head>, and <body> tag structure of a typical HTML document.

The contents of this output document will be the result of processing an input document by performing the following operations:

- Strip out all JavaScript including both references to external scripts and any inline JavaScript that is encountered.
- Strip out all page styling.
- In the <head> section of the output document, include a reference to a stylesheet file called 'doc_style.css' which will be generated separately at a later point in time.
- Remove any element where the 'class' attribute value contains the string 'navigation-links'.
- Place the content of the <article> element in the <body> tag of the output document. Preserve all content visible to the user, including the tag structure hierarchy (i.e. the hierarchy of <div>, <p>, etc.) tags

~~~

Then copy the "images" subdirectory in the input directory to the output directory where it will also be named "images".

If a file contains no <article> element, write a message in the log file that includes the name of the file.

Here is an example of a page in the Kotlin documentation:
"""
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html lang="en-US" data-preset="contrast" data-primary-color="#307FFF"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="robots" content="noindex"><meta name="built-on" content="2024-12-16T14:09:43.280101186"><title>This expressions | Kotlin</title><script type="application/json" id="virtual-toc-data">[{"id":"qualified-this","level":0,"title":"Qualified this","anchor":"#qualified-this"},{"id":"implicit-this","level":0,"title":"Implicit this","anchor":"#implicit-this"}]</script><script type="application/json" id="topic-shortcuts"></script><link href="frontend/app.css" rel="stylesheet"><meta name="msapplication-TileColor" content="#000000"><link rel="icon" type="image/png" sizes="32x32" href="writerside_32.png"><link rel="icon" type="image/png" sizes="64x64" href="writerside_64.png"><meta name="image" content=""><!-- Open Graph --><meta property="og:title" content="This expressions | Kotlin"><meta property="og:description" content=""><meta property="og:image" content=""><meta property="og:site_name" content="Kotlin Help"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:url" content="writerside-documentation/this-expressions.html"><!-- End Open Graph --><!-- Twitter Card --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content=""><meta name="twitter:title" content="This expressions | Kotlin"><meta name="twitter:description" content=""><meta name="twitter:creator" content=""><meta name="twitter:image:src" content=""><!-- End Twitter Card --><!-- Schema.org WebPage --><script type="application/ld+json">{
    "@context": "http://schema.org",
    "@type": "WebPage",
    "@id": "writerside-documentation/this-expressions.html#webpage",
    "url": "writerside-documentation/this-expressions.html",
    "name": "This expressions | Kotlin",
    "description": "",
    "image": "",
    "inLanguage":"en-US"
}</script><!-- End Schema.org --><!-- Schema.org WebSite --><script type="application/ld+json">{
    "@type": "WebSite",
    "@id": "writerside-documentation/#website",
    "url": "writerside-documentation/",
    "name": "Kotlin Help"
}</script><!-- End Schema.org --></head><body data-id="this-expressions" data-main-title="This expressions" data-article-props="{&quot;seeAlsoStyle&quot;:&quot;links&quot;}" data-template="article" data-breadcrumbs="Concepts"><div class="wrapper"><main class="panel _main"><header class="panel__header"><div class="container"><h3>Kotlin  Help</h3><div class="panel-trigger"></div></div></header><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 data-toc="this-expressions" id="this-expressions.md">This expressions</h1><p id="-1nqxe3_2">To denote the current <span class="emphasis" id="-1nqxe3_7">receiver</span>, you use <code class="code" id="-1nqxe3_8">this</code> expressions:</p><ul class="list _bullet" id="-1nqxe3_3"><li class="list__item" id="-1nqxe3_9"><p>In a member of a <a href="classes.html#inheritance" id="-1nqxe3_11" data-tooltip="Classes can be derived from each other and form inheritance hierarchies. Learn more about inheritance in Kotlin.">class</a>, <code class="code" id="-1nqxe3_12">this</code> refers to the current object of that class.</p></li><li class="list__item" id="-1nqxe3_10"><p>In an <a href="extensions.html" id="-1nqxe3_13" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a> or a <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_14" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a> <code class="code" id="-1nqxe3_15">this</code> denotes the <span class="emphasis" id="-1nqxe3_16">receiver</span> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="-1nqxe3_4">If <code class="code" id="-1nqxe3_17">this</code> has no qualifiers, it refers to the <span class="emphasis" id="-1nqxe3_18">innermost enclosing scope</span>. To refer to <code class="code" id="-1nqxe3_19">this</code> in other scopes, <span class="emphasis" id="-1nqxe3_20">label qualifiers</span> are used:</p><section class="chapter"><h2 id="qualified-this" data-toc="qualified-this">Qualified this</h2><p id="-1nqxe3_21">To access <code class="code" id="-1nqxe3_23">this</code> from an outer scope (a <a href="classes.html" id="-1nqxe3_24" data-tooltip="Classes in Kotlin are declared using the keyword class:">class</a>, <a href="extensions.html" id="-1nqxe3_25" data-tooltip="Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class or use design patterns such as Decorator. This is done via special declarations called extensions.">extension function</a>, or labeled <a href="lambdas.html#function-literals-with-receiver" id="-1nqxe3_26" data-tooltip="Function types with receiver, such as A.(B) -&gt; C, can be instantiated with a special form of function literals – function literals with receiver.">function literal with receiver</a>) you write <code class="code" id="-1nqxe3_27">this@label</code>, where <code class="code" id="-1nqxe3_28">@label</code> is a <a href="returns.html" id="-1nqxe3_29" data-tooltip="Kotlin has three structural jump expressions:">label</a> on the scope <code class="code" id="-1nqxe3_30">this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin">
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String -&gt;
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}
</div></section><section class="chapter"><h2 id="implicit-this" data-toc="implicit-this">Implicit this</h2><p id="-1nqxe3_31">When you call a member function on <code class="code" id="-1nqxe3_33">this</code>, you can skip the <code class="code" id="-1nqxe3_34">this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" data-runnable="true" data-min-compiler-version="1.3">
fun main() {
    fun printLine() { println(&quot;Local function&quot;) }

    class A {
        fun printLine() { println(&quot;Member function&quot;) }

        fun invokePrintLine(omitThis: Boolean = false)  {
            if (omitThis) printLine()
            else this.printLine()
        }
    }

    A().invokePrintLine() // Member function
    A().invokePrintLine(omitThis = true) // Local function
}
</div></section><div class="last-modified">Last modified: 16 December 2024</div><div data-feedback-placeholder="true"></div><div class="navigation-links _bottom"><a href="equality.html" class="navigation-links__prev">Equality</a><a href="async-programming.html" class="navigation-links__next">Asynchronous programming techniques</a></div></article><div id="disqus_thread"></div></div></section></main></div><script src="frontend/app.js"></script></body></html>


RESPONSE

#!/usr/bin/env python3
"""
This script processes Kotlin documentation HTML pages to create a pared‐down
documentation set optimized for limited storage devices.

Usage:
    python3 process_docs.py <input_directory> <output_directory> <log_file_path>

The script:
 • Processes each .html file in the input directory (immediate level) by:
   – Removing all JavaScript (external references via <script src=...> and inline <script> code).
   – Removing all page styling (such as <link rel="stylesheet">, <style> tags, and inline style attributes).
   – Removing any element whose class attribute contains "navigation-links".
   – Extracting the contents of the <article> element.
   – Generating a new HTML document with a proper <html>/<head>/<body> structure in the output directory.
     In the head a reference is placed to a stylesheet "doc_style.css".
   – If no <article> element is found, a message is written to the log.
 • Copies the “images” subdirectory from the input directory into the output directory.
 • Logs every file processed with success or error messages.
 • If any exception occurs, the full traceback (with line numbers) is logged and the program terminates.
"""

import os
import sys
import shutil
import logging
import traceback
from bs4 import BeautifulSoup

def setup_logging(log_file_path):
    """Setup logging configuration."""
    logging.basicConfig(
        filename=log_file_path,
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

def remove_javascript(soup):
    """Remove all <script> tags from the soup."""
    for script in soup.find_all('script'):
        script.decompose()

def remove_styling(soup):
    """Remove styling elements:
       - Remove <link> tags that reference stylesheets.
       - Remove <style> tags.
       - Remove inline style attribute from all tags.
    """
    # Remove <link> tags that are stylesheets.
    for link in soup.find_all('link', rel=lambda value: value and "stylesheet" in value.lower()):
        link.decompose()
    # Remove <style> tags.
    for style in soup.find_all('style'):
        style.decompose()
    # Remove inline style attributes.
    for tag in soup.find_all(True):  # True means all tags.
        if tag.has_attr('style'):
            del tag['style']

def remove_navigation_links(soup):
    """Remove any element where the class attribute contains the string 'navigation-links'."""
    # Find all tags that have a class attribute containing "navigation-links"
    for tag in soup.find_all(class_=lambda classes: classes and any("navigation-links" in c for c in classes)):
        tag.decompose()

def create_new_document(article_content):
    """Create a new HTML document string with the required structure including:
         - A <head> section containing a reference to 'doc_style.css'
         - A <body> section that contains the provided article content.
    """
    new_soup = BeautifulSoup(features="html.parser")
    
    # Create html structure
    html_tag = new_soup.new_tag("html")
    new_soup.append(html_tag)
    
    head_tag = new_soup.new_tag("head")
    # Insert meta charset for proper rendering
    meta_tag = new_soup.new_tag("meta", charset="UTF-8")
    head_tag.append(meta_tag)
    # Link to doc_style.css stylesheet (generated separately)
    link_tag = new_soup.new_tag("link", rel="stylesheet", href="doc_style.css")
    head_tag.append(link_tag)
    html_tag.append(head_tag)
    
    body_tag = new_soup.new_tag("body")
    # Insert the article's contents (preserving inner content)
    body_tag.append(article_content)
    html_tag.append(body_tag)
    
    return new_soup

def process_html_file(input_filepath, output_filepath):
    """
    Process a single HTML file:
     - Parse the HTML.
     - Remove JavaScript.
     - Remove styling.
     - Remove navigation-link elements.
     - Extract the <article> element content for the output; if not found,
       log a warning.
     - Create a new HTML document with a proper structure and write it to output_filepath.
    """
    with open(input_filepath, "r", encoding="utf-8") as file:
        content = file.read()
    soup = BeautifulSoup(content, "html.parser")
    
    # Remove all JavaScript
    remove_javascript(soup)
    
    # Remove all styling (external and inline)
    remove_styling(soup)
    
    # Remove elements with class attribute containing "navigation-links"
    remove_navigation_links(soup)
    
    # Extract the article element; if missing, log a message but proceed with an empty body.
    article = soup.find("article")
    if article is None:
        logging.warning(f"File '{os.path.basename(input_filepath)}' contains no <article> element.")
        # Create an empty tag with a message.
        article = soup.new_tag("div")
        article.string = "No article content found."
    else:
        # Detach the article from its original location.
        article.extract()
    
    # Create the new document with the article content as body.
    new_doc = create_new_document(article)
    
    # Write the new document to the output file.
    with open(output_filepath, "w", encoding="utf-8") as outfile:
        outfile.write(str(new_doc))
    
def copy_images_directory(input_dir, output_dir):
    """Copy the 'images' subdirectory from input_dir to output_dir."""
    src_images = os.path.join(input_dir, "images")
    dst_images = os.path.join(output_dir, "images")
    if os.path.isdir(src_images):
        # If destination already exists, remove it first.
        if os.path.exists(dst_images):
            shutil.rmtree(dst_images)
        shutil.copytree(src_images, dst_images)
        logging.info(f"Copied images directory from '{src_images}' to '{dst_images}'.")
    else:
        logging.warning(f"No images directory found at '{src_images}'.")

def main():
    try:
        # Check command-line arguments.
        if len(sys.argv) != 4:
            sys.stderr.write("Usage: python3 process_docs.py <input_directory> <output_directory> <log_file_path>\n")
            sys.exit(1)

        input_dir = sys.argv[1]
        output_dir = sys.argv[2]
        log_file_path = sys.argv[3]
        
        # Setup logging.
        setup_logging(log_file_path)
        logging.info("Starting HTML processing script.")
        
        # Ensure the output directory exists.
        os.makedirs(output_dir, exist_ok=True)
        
        # Process each .html file in the input directory (non-recursive).
        for filename in os.listdir(input_dir):
            if filename.lower().endswith(".html"):
                input_filepath = os.path.join(input_dir, filename)
                output_filepath = os.path.join(output_dir, filename)
                try:
                    process_html_file(input_filepath, output_filepath)
                    logging.info(f"Successfully processed '{filename}'.")
                except Exception as e:
                    logging.error(f"Error processing file '{filename}': {e}")
                    logging.error(traceback.format_exc())
        
        # Copy the "images" subdirectory.
        try:
            copy_images_directory(input_dir, output_dir)
        except Exception as e:
            logging.error(f"Error copying images directory: {e}")
            logging.error(traceback.format_exc())
        
        logging.info("HTML processing script completed successfully.")
    
    except Exception as e:
        # Log any main-level exceptions with a full traceback, then exit.
        logging.error("An unexpected error occurred:")
        logging.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()